# Generated by Django 5.2 on 2025-05-24 20:37

import django.db.models.deletion
import potato.models_dir.FHIR_DataTypes.FHIR_primitive
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('potato', '0005_fhir_list_subject_device_fhir_list_subject_group_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='basedOn_CarePlan',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_basedOn', to='potato.fhir_careplan'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='basedOn_ImmunizationRecommendation',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_basedOn', to='potato.fhir_immunizationrecommendation'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='basedOn_MedicationRequest',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_basedOn', to='potato.fhir_medicationrequest'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='basedOn_NutritionOrder',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_basedOn', to='potato.fhir_nutritionorder'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='basedOn_ServiceRequest',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_basedOn', to='potato.fhir_servicerequest'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='code_cc',
            field=models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='DiagnosticReport_code', to='potato.fhir_gp_coding'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='code_cctext',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='communication',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_communication', to='potato.fhir_communication'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='composition',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_composition', to='potato.fhir_composition'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='conclusion',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_MarkdownField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='effective_Period',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_effective_Period', to='potato.fhir_gp_period'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='effective_dateTime',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='encounter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_encounter', to='potato.fhir_encounter'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='issued',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_InstantField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='performer_CareTeam',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_performer', to='potato.fhir_careteam'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='performer_Device',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_performer', to='potato.fhir_device'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='performer_HealthcareService',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_performer', to='potato.fhir_healthcareservice'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='performer_Organization',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_performer', to='potato.fhir_organization'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='performer_Practitioner',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_performer', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='performer_PractitionerRole',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_performer', to='potato.fhir_practitionerrole'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='procedure',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_procedure', to='potato.fhir_procedure'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='result',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_result', to='potato.fhir_observation'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='resultsInterpreter_CareTeam',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_resultsInterpreter', to='potato.fhir_careteam'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='resultsInterpreter_Organization',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_resultsInterpreter', to='potato.fhir_organization'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='resultsInterpreter_Practitioner',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_resultsInterpreter', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='resultsInterpreter_PractitionerRole',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_resultsInterpreter', to='potato.fhir_practitionerrole'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='specimen',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_specimen', to='potato.fhir_specimen'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='status',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('registered', 'Registered'), ('partial', 'Partial'), ('preliminary', 'Preliminary'), ('modified', 'Modified'), ('final', 'Final'), ('amended', 'Amended'), ('corrected', 'Corrected'), ('appended', 'Appended'), ('cancelled', 'Cancelled'), ('entered-in-error', 'Entered-in-error'), ('unknown', 'Unknown')], null=True),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='study_GenomicStudy',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_study', to='potato.fhir_genomicstudy'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='study_ImagingStudy',
            field=models.ManyToManyField(blank=True, related_name='DiagnosticReport_study', to='potato.fhir_imagingstudy'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='subject_BiologicallyDerivedProduct',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_subject', to='potato.fhir_biologicallyderivedproduct'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='subject_Device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_subject', to='potato.fhir_device'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='subject_Group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_subject', to='potato.fhir_group'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='subject_Location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_subject', to='potato.fhir_location'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='subject_Medication',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_subject', to='potato.fhir_medication'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='subject_Organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_subject', to='potato.fhir_organization'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='subject_Patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_subject', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='subject_Practitioner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_subject', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_diagnosticreport',
            name='subject_Substance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_subject', to='potato.fhir_substance'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='author_CareTeam',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_author', to='potato.fhir_careteam'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='author_Device',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_author', to='potato.fhir_device'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='author_Group',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_author', to='potato.fhir_group'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='author_Organization',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_author', to='potato.fhir_organization'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='author_Patient',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_author', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='author_Practitioner',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_author', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='author_PractitionerRole',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_author', to='potato.fhir_practitionerrole'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='author_RelatedPerson',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_author', to='potato.fhir_relatedperson'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='basedOn_Appointment',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_basedOn', to='potato.fhir_appointment'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='basedOn_AppointmentResponse',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_basedOn', to='potato.fhir_appointmentresponse'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='basedOn_CarePlan',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_basedOn', to='potato.fhir_careplan'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='basedOn_Claim',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_basedOn', to='potato.fhir_claim'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='basedOn_CommunicationRequest',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_basedOn', to='potato.fhir_communicationrequest'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='basedOn_Contract',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_basedOn', to='potato.fhir_contract'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='basedOn_CoverageEligibilityRequest',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_basedOn', to='potato.fhir_coverageeligibilityrequest'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='basedOn_DeviceRequest',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_basedOn', to='potato.fhir_devicerequest'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='basedOn_EnrollmentRequest',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_basedOn', to='potato.fhir_enrollmentrequest'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='basedOn_ImmunizationRecommendation',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_basedOn', to='potato.fhir_immunizationrecommendation'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='basedOn_MedicationRequest',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_basedOn', to='potato.fhir_medicationrequest'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='basedOn_NutritionOrder',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_basedOn', to='potato.fhir_nutritionorder'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='basedOn_RequestOrchestration',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_basedOn', to='potato.fhir_requestorchestration'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='basedOn_ServiceRequest',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_basedOn', to='potato.fhir_servicerequest'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='basedOn_SupplyRequest',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_basedOn', to='potato.fhir_supplyrequest'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='basedOn_VisionPrescription',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_basedOn', to='potato.fhir_visionprescription'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='context_Appointment',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_context', to='potato.fhir_appointment'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='context_Encounter',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_context', to='potato.fhir_encounter'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='context_EpisodeOfCare',
            field=models.ManyToManyField(blank=True, related_name='DocumentReference_context', to='potato.fhir_episodeofcare'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='custodian',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DocumentReference_custodian', to='potato.fhir_organization'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='date',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='description',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_MarkdownField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='docStatus',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('registered', 'Registered'), ('partial', 'Partial'), ('preliminary', 'Preliminary'), ('final', 'Final'), ('amended', 'Amended'), ('corrected', 'Corrected'), ('appended', 'Appended'), ('cancelled', 'Cancelled'), ('entered-in-error', 'Entered-in-error'), ('deprecated', 'Deprecated'), ('unknown', 'Unknown')], null=True),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='facilityType_cc',
            field=models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='DocumentReference_facilityType', to='potato.fhir_gp_coding'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='facilityType_cctext',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='period',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DocumentReference_period', to='potato.fhir_gp_period'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='practiceSetting_cc',
            field=models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='DocumentReference_practiceSetting', to='potato.fhir_gp_coding'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='practiceSetting_cctext',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='status',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('current', 'Current'), ('superseded', 'Superseded'), ('entered-in-error', 'Entered-in-error')], null=True),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='type_cc',
            field=models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='DocumentReference_type', to='potato.fhir_gp_coding'),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='type_cctext',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True),
        ),
        migrations.AddField(
            model_name='fhir_documentreference',
            name='version',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='authoredOn',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='basedOn_CarePlan',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_basedOn', to='potato.fhir_careplan'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='basedOn_ImmunizationRecommendation',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_basedOn', to='potato.fhir_immunizationrecommendation'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='basedOn_MedicationRequest',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_basedOn', to='potato.fhir_medicationrequest'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='basedOn_RequestOrchestration',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_basedOn', to='potato.fhir_requestorchestration'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='basedOn_ServiceRequest',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_basedOn', to='potato.fhir_servicerequest'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='courseOfTherapyType_cc',
            field=models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='MedicationRequest_courseOfTherapyType', to='potato.fhir_gp_coding'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='courseOfTherapyType_cctext',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='doNotPerform',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='effectiveDosePeriod',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_effectiveDosePeriod', to='potato.fhir_gp_period'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='encounter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_encounter', to='potato.fhir_encounter'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='eventHistory',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_eventHistory', to='potato.fhir_provenance'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='groupIdentifier',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_groupIdentifier', to='potato.fhir_gp_identifier'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='informationSource_Group',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_informationSource', to='potato.fhir_group'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='informationSource_Organization',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_informationSource', to='potato.fhir_organization'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='informationSource_Patient',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_informationSource', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='informationSource_Practitioner',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_informationSource', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='informationSource_PractitionerRole',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_informationSource', to='potato.fhir_practitionerrole'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='informationSource_RelatedPerson',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_informationSource', to='potato.fhir_relatedperson'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='insurance_ClaimResponse',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_insurance', to='potato.fhir_claimresponse'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='insurance_Coverage',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_insurance', to='potato.fhir_coverage'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='intent',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('proposal', 'Proposal'), ('plan', 'Plan'), ('order', 'Order'), ('original-order', 'Original-order'), ('reflex-order', 'Reflex-order'), ('filler-order', 'Filler-order'), ('instance-order', 'Instance-order'), ('option', 'Option')], null=True),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='medication_Medication_ref',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_medication_Medication', to='potato.fhir_medication'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='medication_cc',
            field=models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='MedicationRequest_medication', to='potato.fhir_gp_coding'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='medication_cctext',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='performerType_cc',
            field=models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='MedicationRequest_performerType', to='potato.fhir_gp_coding'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='performerType_cctext',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='performer_CareTeam',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_performer', to='potato.fhir_careteam'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='performer_DeviceDefinition',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_performer', to='potato.fhir_devicedefinition'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='performer_Group',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_performer', to='potato.fhir_group'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='performer_HealthcareService',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_performer', to='potato.fhir_healthcareservice'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='performer_Organization',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_performer', to='potato.fhir_organization'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='performer_Patient',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_performer', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='performer_Practitioner',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_performer', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='performer_PractitionerRole',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_performer', to='potato.fhir_practitionerrole'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='performer_RelatedPerson',
            field=models.ManyToManyField(blank=True, related_name='MedicationRequest_performer', to='potato.fhir_relatedperson'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='priorPrescription',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_priorPrescription', to='potato.fhir_medicationrequest'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='priority',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('routine', 'Routine'), ('urgent', 'Urgent'), ('asap', 'Asap'), ('stat', 'Stat')], null=True),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='recorder_Practitioner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_recorder', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='recorder_PractitionerRole',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_recorder', to='potato.fhir_practitionerrole'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='renderedDosageInstruction',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_MarkdownField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='reported',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='requester_Device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_requester', to='potato.fhir_device'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='requester_Organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_requester', to='potato.fhir_organization'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='requester_Patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_requester', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='requester_Practitioner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_requester', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='requester_PractitionerRole',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_requester', to='potato.fhir_practitionerrole'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='requester_RelatedPerson',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_requester', to='potato.fhir_relatedperson'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='status',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('active', 'Active'), ('on-hold', 'On-hold'), ('ended', 'Ended'), ('stopped', 'Stopped'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('entered-in-error', 'Entered-in-error'), ('draft', 'Draft'), ('unknown', 'Unknown')], null=True),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='statusChanged',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='statusReason_cc',
            field=models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='MedicationRequest_statusReason', to='potato.fhir_gp_coding'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='statusReason_cctext',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='subject_Group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_subject', to='potato.fhir_group'),
        ),
        migrations.AddField(
            model_name='fhir_medicationrequest',
            name='subject_Patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_subject', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='asNeeded',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='authoredOn',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='basedOn_CarePlan',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_basedOn', to='potato.fhir_careplan'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='basedOn_MedicationRequest',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_basedOn', to='potato.fhir_medicationrequest'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='basedOn_NutritionOrder',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_basedOn', to='potato.fhir_nutritionorder'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='basedOn_RequestOrchestration',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_basedOn', to='potato.fhir_requestorchestration'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='basedOn_ServiceRequest',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_basedOn', to='potato.fhir_servicerequest'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='bodyStructure',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_bodyStructure', to='potato.fhir_bodystructure'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='code_ActivityDefinition_ref',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_code_ActivityDefinition', to='potato.fhir_activitydefinition'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='code_PlanDefinition_ref',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_code_PlanDefinition', to='potato.fhir_plandefinition'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='code_cc',
            field=models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='ServiceRequest_code', to='potato.fhir_gp_coding'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='code_cctext',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='doNotPerform',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='encounter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_encounter', to='potato.fhir_encounter'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='insurance_ClaimResponse',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_insurance', to='potato.fhir_claimresponse'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='insurance_Coverage',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_insurance', to='potato.fhir_coverage'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='intent',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('proposal', 'Proposal'), ('plan', 'Plan'), ('directive', 'Directive'), ('order +', 'Order +')], null=True),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='occurrence_Period',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_occurrence_Period', to='potato.fhir_gp_period'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='occurrence_Timing',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_occurrence_Timing', to='potato.fhir_gp_timing'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='occurrence_dateTime',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='performerType_cc',
            field=models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='ServiceRequest_performerType', to='potato.fhir_gp_coding'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='performerType_cctext',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='performer_CareTeam',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_performer', to='potato.fhir_careteam'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='performer_Device',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_performer', to='potato.fhir_device'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='performer_Group',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_performer', to='potato.fhir_group'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='performer_HealthcareService',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_performer', to='potato.fhir_healthcareservice'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='performer_Organization',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_performer', to='potato.fhir_organization'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='performer_Patient',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_performer', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='performer_Practitioner',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_performer', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='performer_PractitionerRole',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_performer', to='potato.fhir_practitionerrole'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='performer_RelatedPerson',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_performer', to='potato.fhir_relatedperson'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='priority',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('routine', 'Routine'), ('urgent', 'Urgent'), ('asap', 'Asap'), ('stat', 'Stat')], null=True),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='quantity_Quantity',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_quantity_Quantity', to='potato.fhir_gp_quantity'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='quantity_Range',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_quantity_Range', to='potato.fhir_gp_range'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='quantity_Ratio',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_quantity_Ratio', to='potato.fhir_gp_ratio'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='relevantHistory',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_relevantHistory', to='potato.fhir_provenance'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='replaces',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_replaces', to='potato.fhir_servicerequest'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='requester_Device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_requester', to='potato.fhir_device'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='requester_Group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_requester', to='potato.fhir_group'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='requester_Organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_requester', to='potato.fhir_organization'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='requester_Patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_requester', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='requester_Practitioner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_requester', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='requester_PractitionerRole',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_requester', to='potato.fhir_practitionerrole'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='requester_RelatedPerson',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_requester', to='potato.fhir_relatedperson'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='requisition',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_requisition', to='potato.fhir_gp_identifier'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='specimen',
            field=models.ManyToManyField(blank=True, related_name='ServiceRequest_specimen', to='potato.fhir_specimen'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='status',
            field=potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('draft', 'Draft'), ('active', 'Active'), ('on-hold', 'On-hold'), ('entered-in-error', 'Entered-in-error'), ('ended', 'Ended'), ('completed', 'Completed'), ('revoked', 'Revoked'), ('unknown', 'Unknown')], null=True),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='subject_Device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_subject', to='potato.fhir_device'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='subject_Group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_subject', to='potato.fhir_group'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='subject_Location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_subject', to='potato.fhir_location'),
        ),
        migrations.AddField(
            model_name='fhir_servicerequest',
            name='subject_Patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_subject', to='potato.fhir_patient'),
        ),
        migrations.AlterField(
            model_name='fhir_list_entry',
            name='item_Device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='List_entry_item', to='potato.fhir_device'),
        ),
        migrations.AlterField(
            model_name='fhir_list_entry',
            name='item_Group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='List_entry_item', to='potato.fhir_group'),
        ),
        migrations.AlterField(
            model_name='fhir_list_entry',
            name='item_Patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='List_entry_item', to='potato.fhir_patient'),
        ),
        migrations.AlterField(
            model_name='fhir_list_entry',
            name='item_Practitioner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='List_entry_item', to='potato.fhir_practitioner'),
        ),
        migrations.CreateModel(
            name='FHIR_DiagnosticReport_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('DiagnosticReport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DiagnosticReport_category', to='potato.fhir_diagnosticreport')),
                ('category_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='DiagnosticReport_category', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DiagnosticReport_conclusionCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conclusionCode_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('DiagnosticReport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DiagnosticReport_conclusionCode', to='potato.fhir_diagnosticreport')),
                ('conclusionCode_Condition_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_conclusionCode_Condition', to='potato.fhir_condition')),
                ('conclusionCode_Observation_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_conclusionCode_Observation', to='potato.fhir_observation')),
                ('conclusionCode_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='DiagnosticReport_conclusionCode', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DiagnosticReport_identifier',
            fields=[
                ('fhir_gp_identifier_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_identifier')),
                ('DiagnosticReport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DiagnosticReport_identifier', to='potato.fhir_diagnosticreport')),
            ],
            bases=('potato.fhir_gp_identifier',),
        ),
        migrations.CreateModel(
            name='FHIR_DiagnosticReport_media',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True)),
                ('DiagnosticReport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DiagnosticReport_media', to='potato.fhir_diagnosticreport')),
                ('link', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_media_link', to='potato.fhir_documentreference')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DiagnosticReport_note',
            fields=[
                ('fhir_gp_annotation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_annotation')),
                ('DiagnosticReport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DiagnosticReport_note', to='potato.fhir_diagnosticreport')),
            ],
            bases=('potato.fhir_gp_annotation',),
        ),
        migrations.CreateModel(
            name='FHIR_DiagnosticReport_presentedForm',
            fields=[
                ('fhir_gp_attachment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_attachment')),
                ('DiagnosticReport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DiagnosticReport_presentedForm', to='potato.fhir_diagnosticreport')),
            ],
            bases=('potato.fhir_gp_attachment',),
        ),
        migrations.CreateModel(
            name='FHIR_DiagnosticReport_recomendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recomendation_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('DiagnosticReport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DiagnosticReport_recomendation', to='potato.fhir_diagnosticreport')),
                ('recomendation_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='DiagnosticReport_recomendation', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DiagnosticReport_supportingInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('DiagnosticReport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DiagnosticReport_supportingInfo', to='potato.fhir_diagnosticreport')),
                ('reference_AllergyIntolerance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_supportingInfo_reference', to='potato.fhir_allergyintolerance')),
                ('reference_Citation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_supportingInfo_reference', to='potato.fhir_citation')),
                ('reference_Condition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_supportingInfo_reference', to='potato.fhir_condition')),
                ('reference_DeviceUsage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_supportingInfo_reference', to='potato.fhir_deviceusage')),
                ('reference_DiagnosticReport', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_supportingInfo_reference', to='potato.fhir_diagnosticreport')),
                ('reference_FamilyMemberHistory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_supportingInfo_reference', to='potato.fhir_familymemberhistory')),
                ('reference_GenomicStudy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_supportingInfo_reference', to='potato.fhir_genomicstudy')),
                ('reference_ImagingStudy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_supportingInfo_reference', to='potato.fhir_imagingstudy')),
                ('reference_Observation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_supportingInfo_reference', to='potato.fhir_observation')),
                ('reference_Procedure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DiagnosticReport_supportingInfo_reference', to='potato.fhir_procedure')),
                ('type_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='DiagnosticReport_supportingInfo_type', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DocumentReference_attester',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mode_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('time', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('DocumentReference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DocumentReference_attester', to='potato.fhir_documentreference')),
                ('mode_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='DocumentReference_attester_mode', to='potato.fhir_gp_coding')),
                ('party_Group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DocumentReference_attester_party', to='potato.fhir_group')),
                ('party_Organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DocumentReference_attester_party', to='potato.fhir_organization')),
                ('party_Patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DocumentReference_attester_party', to='potato.fhir_patient')),
                ('party_Practitioner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DocumentReference_attester_party', to='potato.fhir_practitioner')),
                ('party_PractitionerRole', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DocumentReference_attester_party', to='potato.fhir_practitionerrole')),
                ('party_RelatedPerson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DocumentReference_attester_party', to='potato.fhir_relatedperson')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DocumentReference_bodySite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bodySite_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('DocumentReference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DocumentReference_bodySite', to='potato.fhir_documentreference')),
                ('bodySite_BodyStructure_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DocumentReference_bodySite_BodyStructure', to='potato.fhir_bodystructure')),
                ('bodySite_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='DocumentReference_bodySite', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DocumentReference_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('DocumentReference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DocumentReference_category', to='potato.fhir_documentreference')),
                ('category_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='DocumentReference_category', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DocumentReference_content',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('DocumentReference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DocumentReference_content', to='potato.fhir_documentreference')),
                ('attachment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DocumentReference_content_attachment', to='potato.fhir_gp_attachment')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DocumentReference_content_profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_uri', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_URIField(blank=True, null=True)),
                ('value_canonical', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CanonicalField(blank=True, null=True)),
                ('DocumentReference_content', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DocumentReference_content_profile', to='potato.fhir_documentreference_content')),
                ('value_Coding', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DocumentReference_content_profile_value_Coding', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DocumentReference_event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('DocumentReference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DocumentReference_event', to='potato.fhir_documentreference')),
                ('event_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='DocumentReference_event', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DocumentReference_identifier',
            fields=[
                ('fhir_gp_identifier_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_identifier')),
                ('DocumentReference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DocumentReference_identifier', to='potato.fhir_documentreference')),
            ],
            bases=('potato.fhir_gp_identifier',),
        ),
        migrations.CreateModel(
            name='FHIR_DocumentReference_modality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modality_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('DocumentReference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DocumentReference_modality', to='potato.fhir_documentreference')),
                ('modality_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='DocumentReference_modality', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DocumentReference_relatesTo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('DocumentReference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DocumentReference_relatesTo', to='potato.fhir_documentreference')),
                ('code_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='DocumentReference_relatesTo_code', to='potato.fhir_gp_coding')),
                ('target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='DocumentReference_relatesTo_target', to='potato.fhir_documentreference')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DocumentReference_securityLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('securityLabel_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('DocumentReference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DocumentReference_securityLabel', to='potato.fhir_documentreference')),
                ('securityLabel_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='DocumentReference_securityLabel', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_MedicationRequest_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('MedicationRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='MedicationRequest_category', to='potato.fhir_medicationrequest')),
                ('category_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='MedicationRequest_category', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_MedicationRequest_device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('MedicationRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='MedicationRequest_device', to='potato.fhir_medicationrequest')),
                ('device_DeviceDefinition_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_device_DeviceDefinition', to='potato.fhir_devicedefinition')),
                ('device_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='MedicationRequest_device', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_MedicationRequest_dispenseRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numberOfRepeatsAllowed', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_UnsignedIntField(blank=True, null=True)),
                ('doseAdministrationAid_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('MedicationRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='MedicationRequest_dispenseRequest', to='potato.fhir_medicationrequest')),
                ('dispenseInterval', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_dispenseRequest_dispenseInterval', to='potato.fhir_gp_quantity_duration')),
                ('dispenser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_dispenseRequest_dispenser', to='potato.fhir_organization')),
                ('doseAdministrationAid_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='MedicationRequest_dispenseRequest_doseAdministrationAid', to='potato.fhir_gp_coding')),
                ('expectedSupplyDuration', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_dispenseRequest_expectedSupplyDuration', to='potato.fhir_gp_quantity_duration')),
                ('quantity', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_dispenseRequest_quantity', to='potato.fhir_gp_quantity')),
                ('validityPeriod', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_dispenseRequest_validityPeriod', to='potato.fhir_gp_period')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_MedicationRequest_dispenseRequest_dispenserInstruction',
            fields=[
                ('fhir_gp_annotation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_annotation')),
                ('MedicationRequest_dispenseRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='MedicationRequest_dispenseRequest_dispenserInstruction', to='potato.fhir_medicationrequest_dispenserequest')),
            ],
            bases=('potato.fhir_gp_annotation',),
        ),
        migrations.CreateModel(
            name='FHIR_MedicationRequest_dispenseRequest_initialFill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('MedicationRequest_dispenseRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='MedicationRequest_dispenseRequest_initialFill', to='potato.fhir_medicationrequest_dispenserequest')),
                ('duration', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_dispenseRequest_initialFill_duration', to='potato.fhir_gp_quantity_duration')),
                ('quantity', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_dispenseRequest_initialFill_quantity', to='potato.fhir_gp_quantity')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_MedicationRequest_dosageInstruction',
            fields=[
                ('fhir_sp_dosage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_sp_dosage')),
                ('MedicationRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='MedicationRequest_dosageInstruction', to='potato.fhir_medicationrequest')),
            ],
            bases=('potato.fhir_sp_dosage',),
        ),
        migrations.CreateModel(
            name='FHIR_MedicationRequest_identifier',
            fields=[
                ('fhir_gp_identifier_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_identifier')),
                ('MedicationRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='MedicationRequest_identifier', to='potato.fhir_medicationrequest')),
            ],
            bases=('potato.fhir_gp_identifier',),
        ),
        migrations.CreateModel(
            name='FHIR_MedicationRequest_note',
            fields=[
                ('fhir_gp_annotation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_annotation')),
                ('MedicationRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='MedicationRequest_note', to='potato.fhir_medicationrequest')),
            ],
            bases=('potato.fhir_gp_annotation',),
        ),
        migrations.CreateModel(
            name='FHIR_MedicationRequest_reason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('MedicationRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='MedicationRequest_reason', to='potato.fhir_medicationrequest')),
                ('reason_Condition_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_reason_Condition', to='potato.fhir_condition')),
                ('reason_DiagnosticReport_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_reason_DiagnosticReport', to='potato.fhir_diagnosticreport')),
                ('reason_Observation_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_reason_Observation', to='potato.fhir_observation')),
                ('reason_Procedure_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='MedicationRequest_reason_Procedure', to='potato.fhir_procedure')),
                ('reason_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='MedicationRequest_reason', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_MedicationRequest_substitution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allowed_boolean', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('allowed_CodeableConcept_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('reason_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('MedicationRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='MedicationRequest_substitution', to='potato.fhir_medicationrequest')),
                ('allowed_CodeableConcept_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='MedicationRequest_substitution_allowed_CodeableConcept', to='potato.fhir_gp_coding')),
                ('reason_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='MedicationRequest_substitution_reason', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ServiceRequest_asNeededFor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asNeededFor_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('ServiceRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ServiceRequest_asNeededFor', to='potato.fhir_servicerequest')),
                ('asNeededFor_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='ServiceRequest_asNeededFor', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ServiceRequest_bodySite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bodySite_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('ServiceRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ServiceRequest_bodySite', to='potato.fhir_servicerequest')),
                ('bodySite_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='ServiceRequest_bodySite', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ServiceRequest_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('ServiceRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ServiceRequest_category', to='potato.fhir_servicerequest')),
                ('category_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='ServiceRequest_category', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ServiceRequest_identifier',
            fields=[
                ('fhir_gp_identifier_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_identifier')),
                ('ServiceRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ServiceRequest_identifier', to='potato.fhir_servicerequest')),
            ],
            bases=('potato.fhir_gp_identifier',),
        ),
        migrations.CreateModel(
            name='FHIR_ServiceRequest_instantiatesCanonical',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instantiatesCanonical', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CanonicalField(blank=True, null=True)),
                ('ServiceRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ServiceRequest_instantiatesCanonical', to='potato.fhir_servicerequest')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ServiceRequest_instantiatesUri',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instantiatesUri', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_URIField(blank=True, null=True)),
                ('ServiceRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ServiceRequest_instantiatesUri', to='potato.fhir_servicerequest')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ServiceRequest_location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('ServiceRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ServiceRequest_location', to='potato.fhir_servicerequest')),
                ('location_Location_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_location_Location', to='potato.fhir_location')),
                ('location_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='ServiceRequest_location', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ServiceRequest_note',
            fields=[
                ('fhir_gp_annotation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_annotation')),
                ('ServiceRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ServiceRequest_note', to='potato.fhir_servicerequest')),
            ],
            bases=('potato.fhir_gp_annotation',),
        ),
        migrations.CreateModel(
            name='FHIR_ServiceRequest_orderDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameterFocus_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('ServiceRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ServiceRequest_orderDetail', to='potato.fhir_servicerequest')),
                ('parameterFocus_BiologicallyDerivedProduct_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_orderDetail_parameterFocus_BiologicallyDerivedProduct', to='potato.fhir_biologicallyderivedproduct')),
                ('parameterFocus_DeviceDefinition_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_orderDetail_parameterFocus_DeviceDefinition', to='potato.fhir_devicedefinition')),
                ('parameterFocus_DeviceRequest_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_orderDetail_parameterFocus_DeviceRequest', to='potato.fhir_devicerequest')),
                ('parameterFocus_Device_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_orderDetail_parameterFocus_Device', to='potato.fhir_device')),
                ('parameterFocus_MedicationRequest_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_orderDetail_parameterFocus_MedicationRequest', to='potato.fhir_medicationrequest')),
                ('parameterFocus_Medication_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_orderDetail_parameterFocus_Medication', to='potato.fhir_medication')),
                ('parameterFocus_Substance_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_orderDetail_parameterFocus_Substance', to='potato.fhir_substance')),
                ('parameterFocus_SupplyRequest_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_orderDetail_parameterFocus_SupplyRequest', to='potato.fhir_supplyrequest')),
                ('parameterFocus_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='ServiceRequest_orderDetail_parameterFocus', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ServiceRequest_orderDetail_parameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('value_boolean', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('value_CodeableConcept_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('value_string', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True)),
                ('ServiceRequest_orderDetail', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ServiceRequest_orderDetail_parameter', to='potato.fhir_servicerequest_orderdetail')),
                ('code_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='ServiceRequest_orderDetail_parameter_code', to='potato.fhir_gp_coding')),
                ('value_CodeableConcept_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='ServiceRequest_orderDetail_parameter_value_CodeableConcept', to='potato.fhir_gp_coding')),
                ('value_Period', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_orderDetail_parameter_value_Period', to='potato.fhir_gp_period')),
                ('value_Quantity', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_orderDetail_parameter_value_Quantity', to='potato.fhir_gp_quantity')),
                ('value_Range', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_orderDetail_parameter_value_Range', to='potato.fhir_gp_range')),
                ('value_Ratio', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_orderDetail_parameter_value_Ratio', to='potato.fhir_gp_ratio')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ServiceRequest_patientInstruction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instruction_markdown', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_MarkdownField(blank=True, null=True)),
                ('ServiceRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ServiceRequest_patientInstruction', to='potato.fhir_servicerequest')),
                ('instruction_Reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_patientInstruction_instruction_Reference', to='potato.fhir_documentreference')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ServiceRequest_reason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('ServiceRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ServiceRequest_reason', to='potato.fhir_servicerequest')),
                ('reason_Condition_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_reason_Condition', to='potato.fhir_condition')),
                ('reason_DetectedIssue_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_reason_DetectedIssue', to='potato.fhir_detectedissue')),
                ('reason_DiagnosticReport_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_reason_DiagnosticReport', to='potato.fhir_diagnosticreport')),
                ('reason_DocumentReference_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_reason_DocumentReference', to='potato.fhir_documentreference')),
                ('reason_Observation_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_reason_Observation', to='potato.fhir_observation')),
                ('reason_Procedure_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ServiceRequest_reason_Procedure', to='potato.fhir_procedure')),
                ('reason_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='ServiceRequest_reason', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ServiceRequest_supportingInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supportingInfo_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('ServiceRequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ServiceRequest_supportingInfo', to='potato.fhir_servicerequest')),
                ('supportingInfo_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='ServiceRequest_supportingInfo', to='potato.fhir_gp_coding')),
            ],
        ),
    ]
