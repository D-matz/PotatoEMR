# Generated by Django 5.2 on 2025-04-30 03:05

import django.db.models.deletion
import potato.models_dir.FHIR_DataTypes.FHIR_primitive
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='FHIR_Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ActivityDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ActorDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_AdministrableProductDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_AdverseEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_AllergyIntolerance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clinicalStatus_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('verificationStatus_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('type_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('criticality', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('low', 'Low'), ('high', 'High'), ('unable-to-assess', 'Unable-to-assess')], null=True)),
                ('code_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('onset_dateTime', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('onset_string', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True)),
                ('recordedDate', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('lastReactionOccurrence', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_Period',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_datetime', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('start_datetime_precision', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField_Precision(blank=True, choices=[('year', 'Year'), ('month', 'Month'), ('day', 'Day'), ('seconds', 'Seconds')], default='day', max_length=7, null=True)),
                ('end_datetime', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('end_datetime_precision', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField_Precision(blank=True, choices=[('year', 'Year'), ('month', 'Month'), ('day', 'Day'), ('seconds', 'Seconds')], default='day', max_length=7, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_meta_VirtualServiceDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_AppointmentResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ArtifactAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_AuditEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Basic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Binary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_BiologicallyDerivedProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_BiologicallyDerivedProductDispense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_BodyStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Bundle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_CapabilityStatement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_CarePlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_CareTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ChargeItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ChargeItemDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Citation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Claim',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ClaimResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ClinicalAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ClinicalUseDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_CodeSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Communication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_CommunicationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_CompartmentDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Composition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ConceptMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ConditionDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Consent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Coverage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_CoverageEligibilityRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_CoverageEligibilityResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DetectedIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DeviceAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DeviceAssociation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DeviceDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DeviceDispense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DeviceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DeviceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DeviceUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DiagnosticReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_DocumentReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_EncounterHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Endpoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_EnrollmentRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_EnrollmentResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_EpisodeOfCare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_EventDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Evidence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_EvidenceVariable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ExampleScenario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ExplanationOfBenefit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_FamilyMemberHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Flag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_FormularyItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GenomicStudy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Goal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('use', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('home', 'Home'), ('work', 'Work'), ('temp', 'Temporary'), ('old', 'Old'), ('billing', 'Billing')], max_length=20, null=True)),
                ('type', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('postal', 'Postal'), ('physical', 'Physical'), ('both', 'Both')], max_length=20, null=True)),
                ('text', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=255, null=True)),
                ('city', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=255, null=True)),
                ('district', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=255, null=True)),
                ('state', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=255, null=True)),
                ('postalCode', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=20, null=True)),
                ('country', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=3, null=True)),
                ('period', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='potato.fhir_gp_period')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contentType', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(max_length=256)),
                ('language', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(max_length=10)),
                ('data', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_Base64BinaryField()),
                ('url', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_URLField(max_length=1024)),
                ('size', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_SignedInt64Field()),
                ('hash', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_Base64BinaryField()),
                ('title', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(max_length=256)),
                ('time_datetime', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('time_datetime_precision', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField_Precision(blank=True, choices=[('year', 'Year'), ('month', 'Month'), ('day', 'Day'), ('seconds', 'Seconds')], default='day', max_length=7, null=True)),
                ('height', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_PositiveIntField(blank=True, null=True)),
                ('width', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_PositiveIntField(blank=True, null=True)),
                ('frames', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_PositiveIntField(blank=True, null=True)),
                ('duration', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('pages', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_PositiveIntField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_Coding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('system', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_URIField(max_length=1024)),
                ('version', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=256, null=True)),
                ('code', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, max_length=1024, null=True)),
                ('display', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=256, null=True)),
                ('userSelected', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_ContactPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('system', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('phone', 'Phone'), ('fax', 'Fax'), ('email', 'Email'), ('pager', 'Pager'), ('url', 'URL'), ('sms', 'SMS'), ('other', 'Other')], max_length=20, null=True)),
                ('value', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=255, null=True)),
                ('use', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('home', 'Home'), ('work', 'Work'), ('temp', 'Temporary'), ('old', 'Old'), ('mobile', 'Mobile')], max_length=20, null=True)),
                ('rank', models.PositiveIntegerField(blank=True, null=True)),
                ('period', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='potato.fhir_gp_period')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_HumanName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('use', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('usual', 'Usual'), ('official', 'Official'), ('temp', 'Temporary'), ('nickname', 'Nickname'), ('anonymous', 'Anonymous'), ('old', 'Old'), ('maiden', 'Maiden')], max_length=20, null=True)),
                ('text', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=255, null=True)),
                ('family', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=255, null=True)),
                ('period', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='potato.fhir_gp_period')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_Money',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('currency', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, help_text='ISO 4217 currency code (e.g., USD, EUR).', max_length=3, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_Quantity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DecimalField(decimal_places=17, max_digits=18)),
                ('comparator', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('<', 'Less than'), ('<=', 'Less than or equal to'), ('>=', 'Greater than or equal to'), ('>', 'Greater than')], max_length=2, null=True)),
                ('unit', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(max_length=64)),
                ('system', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_URIField(blank=True, max_length=255, null=True)),
                ('code', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_Range',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_SampledData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interval', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('intervalUnit', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(max_length=64)),
                ('factor', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('lowerLimit', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('upperLimit', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('dimensions', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_PositiveIntField()),
                ('codeMap', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CanonicalField(blank=True, max_length=256, null=True)),
                ('offsets', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=1024, null=True)),
                ('data', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=1024, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GraphDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GuidanceResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_HealthcareService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ImagingSelection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ImagingStudy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ImmunizationEvaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ImmunizationRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ImplementationGuide',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_InsurancePlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_InsuranceProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_InventoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_InventoryReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Library',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Linkage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_List',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_meta_ExtendedContactDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ManufacturedItemDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Measure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_MeasureReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Medication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_MedicationAdministration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_MedicationDispense',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_MedicationKnowledge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_MedicationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_MedicationStatement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_MedicinalProductDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_MessageDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_MessageHeader',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_MolecularDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_MolecularSequence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_NamingSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_NutritionIntake',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_NutritionOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_NutritionProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ObservationDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_OperationDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_OperationOutcome',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_OrganizationAffiliation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_PackagedProductDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Parameters',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_PaymentNotice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_PaymentReconciliation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_PersonalRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_PlanDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Practitioner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('gender', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('unknown', 'Unknown')], null=True)),
                ('birthDate', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateField(blank=True, null=True)),
                ('deceased_boolean', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('deceased_dateTime', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Procedure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Provenance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Questionnaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_QuestionnaireResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_RegulatedAuthorization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_RelatedPerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_RequestOrchestration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Requirements',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ResearchStudy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ResearchSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_RiskAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_SearchParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ServiceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_SP_Dosage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_SP_Meta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version_id', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_IdField(blank=True, max_length=64, null=True)),
                ('last_updated', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_InstantField(blank=True, max_length=300, null=True)),
                ('source', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_URIField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Specimen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_SpecimenDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_StructureDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_StructureMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_SubscriptionStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_SubscriptionTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Substance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_SubstanceDefinition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_SubstanceNucleicAcid',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_SubstancePolymer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_SubstanceProtein',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_SubstanceReferenceInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_SubstanceSourceMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_SupplyDelivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_SupplyRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_TerminologyCapabilities',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_TestPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_TestReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_TestScript',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Transport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_ValueSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_VerificationResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_VisionPrescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_AllergyIntolerance_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('food', 'Food'), ('medication', 'Medication'), ('environment', 'Environment'), ('biologic', 'Biologic')], null=True)),
                ('AllergyIntolerance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='AllergyIntolerance_category', to='potato.fhir_allergyintolerance')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_AllergyIntolerance_reaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('substance_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('description', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True)),
                ('onset', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('severity', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe (of event as a whole)', 'Severe (of event as a whole)')], null=True)),
                ('exposureRoute_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('AllergyIntolerance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='AllergyIntolerance_reaction', to='potato.fhir_allergyintolerance')),
                ('exposureRoute_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'https://www.hl7.org/fhir/valueset-route-codes.html'}, related_name='AllergyIntolerance_reaction_exposureRoute', to='potato.fhir_gp_coding')),
                ('substance_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'https://www.hl7.org/fhir/valueset-substance-code.html'}, related_name='AllergyIntolerance_reaction_substance', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('proposed', 'Proposed'), ('pending', 'Pending'), ('booked', 'Booked'), ('arrived', 'Arrived'), ('fulfilled', 'Fulfilled'), ('cancelled', 'Cancelled'), ('noshow', 'Noshow'), ('entered-in-error', 'Entered-in-error'), ('checked-in', 'Checked-in'), ('waitlist', 'Waitlist')], null=True)),
                ('cancellationReason_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('appointmentType_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('priority_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('description', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True)),
                ('start', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_InstantField(blank=True, null=True)),
                ('end', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_InstantField(blank=True, null=True)),
                ('minutesDuration', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_PositiveIntField(blank=True, null=True)),
                ('created', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('cancellationDate', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('recurrenceId', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_PositiveIntField(blank=True, null=True)),
                ('occurrenceChanged', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('account', models.ManyToManyField(blank=True, related_name='Appointment_account', to='potato.fhir_account')),
                ('originatingAppointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_originatingAppointment', to='potato.fhir_appointment')),
                ('previousAppointment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_previousAppointment', to='potato.fhir_appointment')),
                ('replaces', models.ManyToManyField(blank=True, related_name='Appointment_replaces', to='potato.fhir_appointment')),
                ('basedOn_CarePlan', models.ManyToManyField(blank=True, related_name='Appointment_basedOn', to='potato.fhir_careplan')),
                ('basedOn_DeviceRequest', models.ManyToManyField(blank=True, related_name='Appointment_basedOn', to='potato.fhir_devicerequest')),
                ('appointmentType_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Appointment_appointmentType', to='potato.fhir_gp_coding')),
                ('cancellationReason_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Appointment_cancellationReason', to='potato.fhir_gp_coding')),
                ('priority_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Appointment_priority', to='potato.fhir_gp_coding')),
                ('subject_Group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_subject', to='potato.fhir_group')),
                ('basedOn_ImmunizationRecommendation', models.ManyToManyField(blank=True, related_name='Appointment_basedOn', to='potato.fhir_immunizationrecommendation')),
                ('basedOn_MedicationRequest', models.ManyToManyField(blank=True, related_name='Appointment_basedOn', to='potato.fhir_medicationrequest')),
                ('basedOn_NutritionOrder', models.ManyToManyField(blank=True, related_name='Appointment_basedOn', to='potato.fhir_nutritionorder')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_participant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('status', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('accepted', 'Accepted'), ('declined', 'Declined'), ('tentative', 'Tentative'), ('needs-action', 'Needs-action')], null=True)),
                ('Appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_participant', to='potato.fhir_appointment')),
                ('period', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_participant_period', to='potato.fhir_gp_period')),
                ('actor_CareTeam', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_participant_actor', to='potato.fhir_careteam')),
                ('actor_Device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_participant_actor', to='potato.fhir_device')),
                ('actor_Group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_participant_actor', to='potato.fhir_group')),
                ('actor_HealthcareService', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_participant_actor', to='potato.fhir_healthcareservice')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_recurrenceTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timezone_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('recurrenceType_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('lastOccurrenceDate', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateField(blank=True, null=True)),
                ('occurrenceCount', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_PositiveIntField(blank=True, null=True)),
                ('Appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_recurrenceTemplate', to='potato.fhir_appointment')),
                ('recurrenceType_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Appointment_recurrenceTemplate_recurrenceType', to='potato.fhir_gp_coding')),
                ('timezone_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Appointment_recurrenceTemplate_timezone', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_recurrenceTemplate_excludingDate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('excludingDate', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateField(blank=True, null=True)),
                ('Appointment_recurrenceTemplate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_recurrenceTemplate_excludingDate', to='potato.fhir_appointment_recurrencetemplate')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_recurrenceTemplate_excludingRecurrenceId',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('excludingRecurrenceId', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_PositiveIntField(blank=True, null=True)),
                ('Appointment_recurrenceTemplate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_recurrenceTemplate_excludingRecurrenceId', to='potato.fhir_appointment_recurrencetemplate')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_recurrenceTemplate_occurrenceDate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('occurrenceDate', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateField(blank=True, null=True)),
                ('Appointment_recurrenceTemplate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_recurrenceTemplate_occurrenceDate', to='potato.fhir_appointment_recurrencetemplate')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_recurrenceTemplate_weeklyTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monday', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('tuesday', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('wednesday', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('thursday', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('friday', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('saturday', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('sunday', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('weekInterval', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_PositiveIntField(blank=True, null=True)),
                ('Appointment_recurrenceTemplate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_recurrenceTemplate_weeklyTemplate', to='potato.fhir_appointment_recurrencetemplate')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_recurrenceTemplate_yearlyTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('yearInterval', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_PositiveIntField(blank=True, null=True)),
                ('Appointment_recurrenceTemplate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_recurrenceTemplate_yearlyTemplate', to='potato.fhir_appointment_recurrencetemplate')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_Identifier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('use', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('usual', 'Usual'), ('official', 'Official'), ('temp', 'Temporary'), ('secondary', 'Secondary'), ('old', 'Old')], max_length=16, null=True)),
                ('type_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=255, null=True)),
                ('system', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_URIField(blank=True, max_length=1024, null=True)),
                ('value', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=1024, null=True)),
                ('period', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='identifier_period', to='potato.fhir_gp_period')),
                ('type_cc', models.ManyToManyField(limit_choices_to={'codings__binding_rule': 'https://www.hl7.org/fhir/valueset-identifier-type.html'}, to='potato.fhir_gp_coding')),
                ('assigner_foreignKey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='identifier_assigner', to='potato.fhir_organization')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='onset_Period',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='AllergyIntolerance_onset_Period', to='potato.fhir_gp_period'),
        ),
        migrations.CreateModel(
            name='FHIR_Encounter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('planned', 'Planned'), ('in-progress', 'In-progress'), ('on-hold', 'On-hold'), ('discharged', 'Discharged'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('discontinued', 'Discontinued'), ('entered-in-error', 'Entered-in-error'), ('unknown', 'Unknown')], null=True)),
                ('priority_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('subjectStatus_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('plannedStartDate', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('plannedEndDate', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('account', models.ManyToManyField(blank=True, related_name='Encounter_account', to='potato.fhir_account')),
                ('actualPeriod', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_actualPeriod', to='potato.fhir_gp_period')),
                ('appointment', models.ManyToManyField(blank=True, related_name='Encounter_appointment', to='potato.fhir_appointment')),
                ('basedOn_CarePlan', models.ManyToManyField(blank=True, related_name='Encounter_basedOn', to='potato.fhir_careplan')),
                ('basedOn_DeviceRequest', models.ManyToManyField(blank=True, related_name='Encounter_basedOn', to='potato.fhir_devicerequest')),
                ('careTeam', models.ManyToManyField(blank=True, related_name='Encounter_careTeam', to='potato.fhir_careteam')),
                ('partOf', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_partOf', to='potato.fhir_encounter')),
                ('episodeOfCare', models.ManyToManyField(blank=True, related_name='Encounter_episodeOfCare', to='potato.fhir_episodeofcare')),
                ('priority_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Encounter_priority', to='potato.fhir_gp_coding')),
                ('subjectStatus_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Encounter_subjectStatus', to='potato.fhir_gp_coding')),
                ('subject_Group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_subject', to='potato.fhir_group')),
                ('basedOn_ImmunizationRecommendation', models.ManyToManyField(blank=True, related_name='Encounter_basedOn', to='potato.fhir_immunizationrecommendation')),
                ('basedOn_MedicationRequest', models.ManyToManyField(blank=True, related_name='Encounter_basedOn', to='potato.fhir_medicationrequest')),
                ('basedOn_NutritionOrder', models.ManyToManyField(blank=True, related_name='Encounter_basedOn', to='potato.fhir_nutritionorder')),
                ('serviceProvider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_serviceProvider', to='potato.fhir_organization')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Condition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clinicalStatus_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('verificationStatus_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('severity_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('code_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('onset_dateTime', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('onset_string', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True)),
                ('abatement_dateTime', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('abatement_string', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True)),
                ('recordedDate', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('abatement_Period', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_abatement_Period', to='potato.fhir_gp_period')),
                ('bodyStructure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_bodyStructure', to='potato.fhir_bodystructure')),
                ('onset_Period', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_onset_Period', to='potato.fhir_gp_period')),
                ('asserter_Device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_asserter', to='potato.fhir_device')),
                ('encounter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_encounter', to='potato.fhir_encounter')),
                ('clinicalStatus_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'https://hl7.org/fhir/valueset-condition-clinical.html'}, related_name='Condition_clinicalStatus', to='potato.fhir_gp_coding')),
                ('code_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'https://build.fhir.org/valueset-condition-code.html'}, related_name='Condition_code', to='potato.fhir_gp_coding')),
                ('severity_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'https://build.fhir.org/valueset-condition-severity.html'}, related_name='Condition_severity', to='potato.fhir_gp_coding')),
                ('verificationStatus_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'http://hl7.org/fhir/valueset-condition-ver-status.html'}, related_name='Condition_verificationStatus', to='potato.fhir_gp_coding')),
                ('abatement_Range', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_abatement_Range', to='potato.fhir_gp_range')),
                ('onset_Range', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_onset_Range', to='potato.fhir_gp_range')),
                ('subject_Group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_subject', to='potato.fhir_group')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='encounter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='AllergyIntolerance_encounter', to='potato.fhir_encounter'),
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_diagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_diagnosis', to='potato.fhir_encounter')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_participant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_participant', to='potato.fhir_encounter')),
                ('actor_Device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_participant_actor', to='potato.fhir_device')),
                ('period', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_participant_period', to='potato.fhir_gp_period')),
                ('actor_Group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_participant_actor', to='potato.fhir_group')),
                ('actor_HealthcareService', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_participant_actor', to='potato.fhir_healthcareservice')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_reason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_reason', to='potato.fhir_encounter')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_AddressLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(max_length=255)),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='potato.fhir_gp_address')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_Binding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('binding_rule', models.CharField(blank=True, max_length=5678, null=True)),
                ('binding_codings', models.ManyToManyField(related_name='codings', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_type', to='potato.fhir_encounter')),
                ('type_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Encounter_type', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_specialCourtesy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specialCourtesy_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_specialCourtesy', to='potato.fhir_encounter')),
                ('specialCourtesy_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Encounter_specialCourtesy', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_specialArrangement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specialArrangement_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_specialArrangement', to='potato.fhir_encounter')),
                ('specialArrangement_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Encounter_specialArrangement', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_reason_use',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('use_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Encounter_reason', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_reason_use', to='potato.fhir_encounter_reason')),
                ('use_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Encounter_reason_use', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_participant_type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Encounter_participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_participant_type', to='potato.fhir_encounter_participant')),
                ('type_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Encounter_participant_type', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_dietPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dietPreference_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_dietPreference', to='potato.fhir_encounter')),
                ('dietPreference_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Encounter_dietPreference', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_diagnosis_use',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('use_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Encounter_diagnosis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_diagnosis_use', to='potato.fhir_encounter_diagnosis')),
                ('use_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Encounter_diagnosis_use', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_diagnosis_condition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Encounter_diagnosis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_diagnosis_condition', to='potato.fhir_encounter_diagnosis')),
                ('condition_Condition_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_diagnosis_condition_Condition', to='potato.fhir_condition')),
                ('condition_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Encounter_diagnosis_condition', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_class', to='potato.fhir_encounter')),
                ('class_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Encounter_class', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Condition_evidence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evidence_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Condition_evidence', to='potato.fhir_condition')),
                ('evidence_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Condition_evidence', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Condition_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Condition_category', to='potato.fhir_condition')),
                ('category_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Condition_category', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Condition_bodySite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bodySite_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Condition_bodySite', to='potato.fhir_condition')),
                ('bodySite_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Condition_bodySite', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_specialty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specialty_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_specialty', to='potato.fhir_appointment')),
                ('specialty_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Appointment_specialty', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_serviceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serviceCategory_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_serviceCategory', to='potato.fhir_appointment')),
                ('serviceCategory_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Appointment_serviceCategory', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_recurrenceTemplate_monthlyTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dayOfMonth', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_PositiveIntField(blank=True, null=True)),
                ('monthInterval', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_PositiveIntField(blank=True, null=True)),
                ('Appointment_recurrenceTemplate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_recurrenceTemplate_monthlyTemplate', to='potato.fhir_appointment_recurrencetemplate')),
                ('dayOfWeek', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_recurrenceTemplate_monthlyTemplate_dayOfWeek', to='potato.fhir_gp_coding')),
                ('nthWeekOfMonth', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_recurrenceTemplate_monthlyTemplate_nthWeekOfMonth', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_patientInstruction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patientInstruction_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_patientInstruction', to='potato.fhir_appointment')),
                ('patientInstruction_Binary_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_patientInstruction_Binary', to='potato.fhir_binary')),
                ('patientInstruction_Communication_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_patientInstruction_Communication', to='potato.fhir_communication')),
                ('patientInstruction_DocumentReference_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_patientInstruction_DocumentReference', to='potato.fhir_documentreference')),
                ('patientInstruction_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Appointment_patientInstruction', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_participant_type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Appointment_participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_participant_type', to='potato.fhir_appointment_participant')),
                ('type_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Appointment_participant_type', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_class', to='potato.fhir_appointment')),
                ('class_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Appointment_class', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='clinicalStatus_cc',
            field=models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'https://www.hl7.org/fhir/valueset-allergyintolerance-clinical.html'}, related_name='AllergyIntolerance_clinicalStatus', to='potato.fhir_gp_coding'),
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='code_cc',
            field=models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'https://www.hl7.org/fhir/valueset-allergyintolerance-code.html'}, related_name='AllergyIntolerance_code', to='potato.fhir_gp_coding'),
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='type_cc',
            field=models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'https://www.hl7.org/fhir/valueset-allergy-intolerance-type.html'}, related_name='AllergyIntolerance_type', to='potato.fhir_gp_coding'),
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='verificationStatus_cc',
            field=models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'https://www.hl7.org/fhir/valueset-allergyintolerance-verification.html'}, related_name='AllergyIntolerance_verificationStatus', to='potato.fhir_gp_coding'),
        ),
        migrations.CreateModel(
            name='FHIR_GP_HumanName_Given',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_given', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(max_length=255)),
                ('human_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='given_names', to='potato.fhir_gp_humanname')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_HumanName_Prefix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_prefix', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(max_length=255)),
                ('human_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prefixes', to='potato.fhir_gp_humanname')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_HumanName_Suffix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_suffix', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(max_length=255)),
                ('human_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='suffixes', to='potato.fhir_gp_humanname')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_Quantity_Age',
            fields=[
                ('fhir_gp_quantity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_quantity')),
            ],
            bases=('potato.fhir_gp_quantity',),
        ),
        migrations.CreateModel(
            name='FHIR_GP_Quantity_Count',
            fields=[
                ('fhir_gp_quantity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_quantity')),
            ],
            bases=('potato.fhir_gp_quantity',),
        ),
        migrations.CreateModel(
            name='FHIR_GP_Quantity_Distance',
            fields=[
                ('fhir_gp_quantity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_quantity')),
            ],
            bases=('potato.fhir_gp_quantity',),
        ),
        migrations.CreateModel(
            name='FHIR_GP_Quantity_Duration',
            fields=[
                ('fhir_gp_quantity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_quantity')),
            ],
            bases=('potato.fhir_gp_quantity',),
        ),
        migrations.CreateModel(
            name='FHIR_GP_Quantity_Money',
            fields=[
                ('fhir_gp_quantity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_quantity')),
            ],
            bases=('potato.fhir_gp_quantity',),
        ),
        migrations.CreateModel(
            name='FHIR_GP_Quantity_Simple',
            fields=[
                ('fhir_gp_quantity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_quantity')),
            ],
            bases=('potato.fhir_gp_quantity',),
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='onset_Range',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='AllergyIntolerance_onset_Range', to='potato.fhir_gp_range'),
        ),
        migrations.CreateModel(
            name='FHIR_GP_Ratio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numerator', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ratio_numerator', to='potato.fhir_gp_quantity')),
                ('denominator', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ratio_denominator', to='potato.fhir_gp_quantity_simple')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_Timing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_text', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=50, null=True)),
                ('repeat_count', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_PositiveIntField(blank=True, null=True)),
                ('repeat_countMax', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_PositiveIntField(blank=True, null=True)),
                ('repeat_duration', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('repeat_durationMax', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('repeat_duration_unit', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('s', 'Second'), ('min', 'Minute'), ('h', 'Hour'), ('d', 'Day'), ('wk', 'Week'), ('mo', 'Month')], max_length=20, null=True)),
                ('repeat_frequency', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_PositiveIntField(blank=True, null=True)),
                ('repeat_frequencyMmax', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_PositiveIntField(blank=True, null=True)),
                ('repeat_period', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('repeat_periodMax', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('repeat_periodUnit', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('s', 'Second'), ('min', 'Minute'), ('h', 'Hour'), ('d', 'Day'), ('wk', 'Week'), ('mo', 'Month')], max_length=20, null=True)),
                ('repeat_offset', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_UnsignedIntField(blank=True, null=True)),
                ('code_cc', models.ManyToManyField(limit_choices_to={'codings__binding_rule': 'https://www.hl7.org/fhir/valueset-timing-abbreviation.html'}, to='potato.fhir_gp_coding')),
                ('repeat_bounds_period', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='potato.fhir_gp_period')),
                ('repeat_bounds_range', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='potato.fhir_gp_range')),
                ('repeat_bounds_duration', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='potato.fhir_gp_quantity_duration')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_Timing_Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('timing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='potato.fhir_gp_timing')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_Timing_repeat_dayOfWeek',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dayOfWeek', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('sun', 'Sunday'), ('mon', 'Monday'), ('tue', 'Tuesday'), ('wed', 'Wednesday'), ('thu', 'Thursday'), ('fri', 'Friday'), ('sat', 'Saturday')], max_length=20, null=True)),
                ('timing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='repeat_dayOfWeek', to='potato.fhir_gp_timing')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_Timing_repeat_timeOfDay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timeOfDay', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_TimeField(blank=True, null=True)),
                ('timing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='repeat_timeOfDay', to='potato.fhir_gp_timing')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_Timing_repeat_when',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('MORN', 'Morning'), ('MORN.early', 'Early Morning'), ('MORN.late', 'Late Morning'), ('NOON', 'Noon'), ('AFT', 'Afternoon'), ('AFT.early', 'Early Afternoon'), ('AFT.late', 'Late Afternoon'), ('EVE', 'Evening'), ('EVE.early', 'Early Evening'), ('EVE.late', 'Late Evening'), ('NIGHT', 'Night'), ('PHS', 'After Sleep'), ('IMD', 'Immediate'), ('HS', 'Prior to Sleep'), ('WAKE', 'Upon Waking'), ('C', 'Meal'), ('CM', 'Breakfast'), ('CD', 'Lunch'), ('CV', 'Dinner'), ('AC', 'Before Meal'), ('ACM', 'Before Breakfast'), ('ACD', 'Before Lunch'), ('ACV', 'Before Dinner'), ('PC', 'After Meal'), ('PCM', 'After Breakfast'), ('PCD', 'After Lunch'), ('PCV', 'After Dinner')], max_length=20, null=True)),
                ('timing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='repeat_when', to='potato.fhir_gp_timing')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_serviceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serviceType_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_serviceType', to='potato.fhir_encounter')),
                ('serviceType_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Encounter_serviceType', to='potato.fhir_gp_coding')),
                ('serviceType_HealthcareService_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_serviceType_HealthcareService', to='potato.fhir_healthcareservice')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_serviceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serviceType_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_serviceType', to='potato.fhir_appointment')),
                ('serviceType_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Appointment_serviceType', to='potato.fhir_gp_coding')),
                ('serviceType_HealthcareService_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_serviceType_HealthcareService', to='potato.fhir_healthcareservice')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Immunization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('completed', 'Completed'), ('entered-in-error', 'Entered-in-error'), ('not-done', 'Not-done')], null=True)),
                ('statusReason_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('vaccineCode_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('administeredProduct_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('manufacturer_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('lotNumber', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True)),
                ('expirationDate', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateField(blank=True, null=True)),
                ('occurrence_dateTime', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('occurrence_string', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True)),
                ('primarySource', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('informationSource_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('site_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('route_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('isSubpotent', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('fundingSource_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('administeredProduct_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Immunization_administeredProduct', to='potato.fhir_gp_coding')),
                ('basedOn_CarePlan', models.ManyToManyField(blank=True, related_name='Immunization_basedOn', to='potato.fhir_careplan')),
                ('doseQuantity', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_doseQuantity', to='potato.fhir_gp_quantity')),
                ('encounter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_encounter', to='potato.fhir_encounter')),
                ('fundingSource_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Immunization_fundingSource', to='potato.fhir_gp_coding')),
                ('informationSource_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Immunization_informationSource', to='potato.fhir_gp_coding')),
                ('manufacturer_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Immunization_manufacturer', to='potato.fhir_gp_coding')),
                ('route_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Immunization_route', to='potato.fhir_gp_coding')),
                ('site_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Immunization_site', to='potato.fhir_gp_coding')),
                ('statusReason_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Immunization_statusReason', to='potato.fhir_gp_coding')),
                ('vaccineCode_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Immunization_vaccineCode', to='potato.fhir_gp_coding')),
                ('basedOn_ImmunizationRecommendation', models.ManyToManyField(blank=True, related_name='Immunization_basedOn', to='potato.fhir_immunizationrecommendation')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Immunization_programEligibility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('program_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('programStatus_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Immunization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Immunization_programEligibility', to='potato.fhir_immunization')),
                ('programStatus_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Immunization_programEligibility_programStatus', to='potato.fhir_gp_coding')),
                ('program_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Immunization_programEligibility_program', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Immunization_protocolApplied',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('series', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True)),
                ('doseNumber_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('seriesDoses_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Immunization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Immunization_protocolApplied', to='potato.fhir_immunization')),
                ('doseNumber_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Immunization_protocolApplied_doseNumber', to='potato.fhir_gp_coding')),
                ('seriesDoses_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Immunization_protocolApplied_seriesDoses', to='potato.fhir_gp_coding')),
                ('authority', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_protocolApplied_authority', to='potato.fhir_organization')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Immunization_protocolApplied_targetDisease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('targetDisease_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Immunization_protocolApplied', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Immunization_protocolApplied_targetDisease', to='potato.fhir_immunization_protocolapplied')),
                ('targetDisease_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Immunization_protocolApplied_targetDisease', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Immunization_subpotentReason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subpotentReason_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Immunization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Immunization_subpotentReason', to='potato.fhir_immunization')),
                ('subpotentReason_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Immunization_subpotentReason', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('active', 'Active'), ('suspended', 'Suspended'), ('inactive', 'Inactive')], null=True)),
                ('name', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True)),
                ('description', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_MarkdownField(blank=True, null=True)),
                ('mode', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('instance', 'Instance'), ('kind', 'Kind')], null=True)),
                ('form_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('address', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Location_address', to='potato.fhir_gp_address')),
                ('endpoint', models.ManyToManyField(blank=True, related_name='Location_endpoint', to='potato.fhir_endpoint')),
                ('form_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Location_form', to='potato.fhir_gp_coding')),
                ('operationalStatus', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Location_operationalStatus', to='potato.fhir_gp_coding')),
                ('partOf', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Location_partOf', to='potato.fhir_location')),
                ('managingOrganization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Location_managingOrganization', to='potato.fhir_organization')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_immunization',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_location', to='potato.fhir_location'),
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('planned', 'Planned'), ('active', 'Active'), ('reserved', 'Reserved'), ('completed', 'Completed')], null=True)),
                ('form_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_location', to='potato.fhir_encounter')),
                ('period', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_location_period', to='potato.fhir_gp_period')),
                ('form_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Encounter_location_form', to='potato.fhir_gp_coding')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_location_location', to='potato.fhir_location')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_appointment_participant',
            name='actor_Location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_participant_actor', to='potato.fhir_location'),
        ),
        migrations.CreateModel(
            name='FHIR_Location_alias',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alias', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True)),
                ('Location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Location_alias', to='potato.fhir_location')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Location_characteristic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('characteristic_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Location_characteristic', to='potato.fhir_location')),
                ('characteristic_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Location_characteristic', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Location_position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('longitude', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('latitude', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('altitude', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DecimalField(blank=True, decimal_places=5, max_digits=10, null=True)),
                ('Location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Location_position', to='potato.fhir_location')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Location_type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Location_type', to='potato.fhir_location')),
                ('type_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Location_type', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_immunization',
            name='administeredProduct_Medication_ref',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_administeredProduct_Medication', to='potato.fhir_medication'),
        ),
        migrations.AddField(
            model_name='fhir_immunization',
            name='basedOn_MedicationRequest',
            field=models.ManyToManyField(blank=True, related_name='Immunization_basedOn', to='potato.fhir_medicationrequest'),
        ),
        migrations.CreateModel(
            name='FHIR_Observation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instantiates_canonical', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CanonicalField(blank=True, null=True)),
                ('status', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('registered', 'Registered'), ('specimen-in-process', 'Specimen-in-process'), ('preliminary', 'Preliminary'), ('final', 'Final'), ('amended', 'Amended'), ('corrected', 'Corrected'), ('appended', 'Appended'), ('cancelled', 'Cancelled'), ('entered-in-error', 'Entered-in-error'), ('unknown', 'Unknown'), ('cannot-be-obtained', 'Cannot-be-obtained')], null=True)),
                ('code_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('organizer', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('effective_dateTime', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('effective_instant', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_InstantField(blank=True, null=True)),
                ('issued', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_InstantField(blank=True, null=True)),
                ('value_CodeableConcept_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('value_string', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True)),
                ('value_boolean', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('value_time', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_TimeField(blank=True, null=True)),
                ('value_dateTime', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('dataAbsentReason_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('bodySite_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('method_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('basedOn_CarePlan', models.ManyToManyField(blank=True, related_name='Observation_basedOn', to='potato.fhir_careplan')),
                ('basedOn_DeviceRequest', models.ManyToManyField(blank=True, related_name='Observation_basedOn', to='potato.fhir_devicerequest')),
                ('basedOn_ImmunizationRecommendation', models.ManyToManyField(blank=True, related_name='Observation_basedOn', to='potato.fhir_immunizationrecommendation')),
                ('basedOn_MedicationRequest', models.ManyToManyField(blank=True, related_name='Observation_basedOn', to='potato.fhir_medicationrequest')),
                ('basedOn_NutritionOrder', models.ManyToManyField(blank=True, related_name='Observation_basedOn', to='potato.fhir_nutritionorder')),
                ('bodySite_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Observation_bodySite', to='potato.fhir_gp_coding')),
                ('bodyStructure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_bodyStructure', to='potato.fhir_bodystructure')),
                ('code_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'http://loinc.org'}, related_name='Observation_code', to='potato.fhir_gp_coding')),
                ('dataAbsentReason_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Observation_dataAbsentReason', to='potato.fhir_gp_coding')),
                ('derivedFrom_DocumentReference', models.ManyToManyField(blank=True, related_name='Observation_derivedFrom', to='potato.fhir_documentreference')),
                ('derivedFrom_GenomicStudy', models.ManyToManyField(blank=True, related_name='Observation_derivedFrom', to='potato.fhir_genomicstudy')),
                ('derivedFrom_ImagingSelection', models.ManyToManyField(blank=True, related_name='Observation_derivedFrom', to='potato.fhir_imagingselection')),
                ('derivedFrom_ImagingStudy', models.ManyToManyField(blank=True, related_name='Observation_derivedFrom', to='potato.fhir_imagingstudy')),
                ('derivedFrom_MolecularSequence', models.ManyToManyField(blank=True, related_name='Observation_derivedFrom', to='potato.fhir_molecularsequence')),
                ('derivedFrom_Observation', models.ManyToManyField(blank=True, related_name='Observation_derivedFrom', to='potato.fhir_observation')),
                ('device_Device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_device', to='potato.fhir_device')),
                ('device_DeviceMetric', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_device', to='potato.fhir_devicemetric')),
                ('effective_Period', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_effective_Period', to='potato.fhir_gp_period')),
                ('effective_Timing', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_effective_Timing', to='potato.fhir_gp_timing')),
                ('encounter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_encounter', to='potato.fhir_encounter')),
                ('hasMember_MolecularSequence', models.ManyToManyField(blank=True, related_name='Observation_hasMember', to='potato.fhir_molecularsequence')),
                ('hasMember_Observation', models.ManyToManyField(blank=True, related_name='Observation_hasMember', to='potato.fhir_observation')),
                ('method_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Observation_method', to='potato.fhir_gp_coding')),
                ('partOf_GenomicStudy', models.ManyToManyField(blank=True, related_name='Observation_partOf', to='potato.fhir_genomicstudy')),
                ('partOf_ImagingStudy', models.ManyToManyField(blank=True, related_name='Observation_partOf', to='potato.fhir_imagingstudy')),
                ('partOf_Immunization', models.ManyToManyField(blank=True, related_name='Observation_partOf', to='potato.fhir_immunization')),
                ('partOf_MedicationAdministration', models.ManyToManyField(blank=True, related_name='Observation_partOf', to='potato.fhir_medicationadministration')),
                ('partOf_MedicationDispense', models.ManyToManyField(blank=True, related_name='Observation_partOf', to='potato.fhir_medicationdispense')),
                ('partOf_MedicationStatement', models.ManyToManyField(blank=True, related_name='Observation_partOf', to='potato.fhir_medicationstatement')),
                ('performer_CareTeam', models.ManyToManyField(blank=True, related_name='Observation_performer', to='potato.fhir_careteam')),
                ('performer_HealthcareService', models.ManyToManyField(blank=True, related_name='Observation_performer', to='potato.fhir_healthcareservice')),
                ('specimen_Group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_specimen', to='potato.fhir_group')),
                ('subject_BiologicallyDerivedProduct', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_subject', to='potato.fhir_biologicallyderivedproduct')),
                ('subject_Device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_subject', to='potato.fhir_device')),
                ('subject_Group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_subject', to='potato.fhir_group')),
                ('subject_Location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_subject', to='potato.fhir_location')),
                ('subject_Medication', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_subject', to='potato.fhir_medication')),
                ('subject_NutritionProduct', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_subject', to='potato.fhir_nutritionproduct')),
                ('value_Attachment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_value_Attachment', to='potato.fhir_gp_attachment')),
                ('value_CodeableConcept_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Observation_value_CodeableConcept', to='potato.fhir_gp_coding')),
                ('value_Period', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_value_Period', to='potato.fhir_gp_period')),
                ('value_Quantity', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_value_Quantity', to='potato.fhir_gp_quantity')),
                ('value_Range', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_value_Range', to='potato.fhir_gp_range')),
                ('value_Ratio', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_value_Ratio', to='potato.fhir_gp_ratio')),
                ('value_Reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_value_Reference', to='potato.fhir_molecularsequence')),
                ('value_SampledData', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_value_SampledData', to='potato.fhir_gp_sampleddata')),
                ('instantiates_Reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_instantiates_Reference', to='potato.fhir_observationdefinition')),
                ('performer_Organization', models.ManyToManyField(blank=True, related_name='Observation_performer', to='potato.fhir_organization')),
                ('subject_Organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_subject', to='potato.fhir_organization')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Immunization_reason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Immunization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Immunization_reason', to='potato.fhir_immunization')),
                ('reason_Condition_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_reason_Condition', to='potato.fhir_condition')),
                ('reason_DiagnosticReport_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_reason_DiagnosticReport', to='potato.fhir_diagnosticreport')),
                ('reason_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Immunization_reason', to='potato.fhir_gp_coding')),
                ('reason_Observation_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_reason_Observation', to='potato.fhir_observation')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Immunization_reaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('manifestation_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('reported', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('Immunization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Immunization_reaction', to='potato.fhir_immunization')),
                ('manifestation_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Immunization_reaction_manifestation', to='potato.fhir_gp_coding')),
                ('manifestation_Observation_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_reaction_manifestation_Observation', to='potato.fhir_observation')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Condition_stage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('type_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Condition_stage', to='potato.fhir_condition')),
                ('assessment_ClinicalAssessment', models.ManyToManyField(blank=True, related_name='Condition_stage_assessment', to='potato.fhir_clinicalassessment')),
                ('assessment_DiagnosticReport', models.ManyToManyField(blank=True, related_name='Condition_stage_assessment', to='potato.fhir_diagnosticreport')),
                ('summary_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Condition_stage_summary', to='potato.fhir_gp_coding')),
                ('type_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Condition_stage_type', to='potato.fhir_gp_coding')),
                ('assessment_Observation', models.ManyToManyField(blank=True, related_name='Condition_stage_assessment', to='potato.fhir_observation')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_AllergyIntolerance_reaction_manifestation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manifestation_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('AllergyIntolerance_reaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='AllergyIntolerance_reaction_manifestation', to='potato.fhir_allergyintolerance_reaction')),
                ('manifestation_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'https://www.hl7.org/fhir/valueset-clinical-findings.html'}, related_name='AllergyIntolerance_reaction_manifestation', to='potato.fhir_gp_coding')),
                ('manifestation_Observation_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='AllergyIntolerance_reaction_manifestation_Observation', to='potato.fhir_observation')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Observation_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Observation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Observation_category', to='potato.fhir_observation')),
                ('category_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Observation_category', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Observation_component',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('value_CodeableConcept_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('value_string', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True)),
                ('value_boolean', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('value_time', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_TimeField(blank=True, null=True)),
                ('value_dateTime', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('dataAbsentReason_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Observation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Observation_component', to='potato.fhir_observation')),
                ('code_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'http://loinc.org'}, related_name='Observation_component_code', to='potato.fhir_gp_coding')),
                ('dataAbsentReason_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Observation_component_dataAbsentReason', to='potato.fhir_gp_coding')),
                ('value_Attachment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_component_value_Attachment', to='potato.fhir_gp_attachment')),
                ('value_CodeableConcept_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Observation_component_value_CodeableConcept', to='potato.fhir_gp_coding')),
                ('value_Period', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_component_value_Period', to='potato.fhir_gp_period')),
                ('value_Quantity', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_component_value_Quantity', to='potato.fhir_gp_quantity')),
                ('value_Range', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_component_value_Range', to='potato.fhir_gp_range')),
                ('value_Ratio', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_component_value_Ratio', to='potato.fhir_gp_ratio')),
                ('value_Reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_component_value_Reference', to='potato.fhir_molecularsequence')),
                ('value_SampledData', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_component_value_SampledData', to='potato.fhir_gp_sampleddata')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Observation_component_interpretation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interpretation_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Observation_component', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Observation_component_interpretation', to='potato.fhir_observation_component')),
                ('interpretation_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Observation_component_interpretation', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Observation_interpretation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interpretation_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Observation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Observation_interpretation', to='potato.fhir_observation')),
                ('interpretation_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Observation_interpretation', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Observation_referenceRange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('normalValue_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('type_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('text', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_MarkdownField(blank=True, null=True)),
                ('Observation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Observation_referenceRange', to='potato.fhir_observation')),
                ('age', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_referenceRange_age', to='potato.fhir_gp_range')),
                ('high', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_referenceRange_high', to='potato.fhir_gp_quantity')),
                ('low', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_referenceRange_low', to='potato.fhir_gp_quantity')),
                ('normalValue_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Observation_referenceRange_normalValue', to='potato.fhir_gp_coding')),
                ('type_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Observation_referenceRange_type', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Observation_referenceRange_appliesTo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appliesTo_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Observation_referenceRange', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Observation_referenceRange_appliesTo', to='potato.fhir_observation_referencerange')),
                ('appliesTo_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Observation_referenceRange_appliesTo', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Observation_triggeredBy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('reflex', 'Reflex'), ('repeat', 'Repeat'), ('re-run', 'Re-run')], null=True)),
                ('reason', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True)),
                ('Observation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Observation_triggeredBy', to='potato.fhir_observation')),
                ('triggeredBy_observation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_triggeredBy_observation', to='potato.fhir_observation')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_immunization',
            name='informationSource_Organization_ref',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_informationSource_Organization', to='potato.fhir_organization'),
        ),
        migrations.AddField(
            model_name='fhir_immunization',
            name='manufacturer_Organization_ref',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_manufacturer_Organization', to='potato.fhir_organization'),
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_admission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admitSource_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('reAdmission_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('dischargeDisposition_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_admission', to='potato.fhir_encounter')),
                ('preAdmissionIdentifier', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_admission_preAdmissionIdentifier', to='potato.fhir_gp_identifier')),
                ('admitSource_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Encounter_admission_admitSource', to='potato.fhir_gp_coding')),
                ('dischargeDisposition_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Encounter_admission_dischargeDisposition', to='potato.fhir_gp_coding')),
                ('reAdmission_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Encounter_admission_reAdmission', to='potato.fhir_gp_coding')),
                ('destination_Location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_admission_destination', to='potato.fhir_location')),
                ('origin_Location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_admission_origin', to='potato.fhir_location')),
                ('destination_Organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_admission_destination', to='potato.fhir_organization')),
                ('origin_Organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_admission_origin', to='potato.fhir_organization')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='recorder_Organization',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='AllergyIntolerance_recorder', to='potato.fhir_organization'),
        ),
        migrations.CreateModel(
            name='FHIR_Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('gender', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('unknown', 'Unknown')], null=True)),
                ('birthDate', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateField(blank=True, null=True)),
                ('deceased_boolean', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('deceased_dateTime', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('maritalStatus_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('multipleBirth_boolean', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('generalPractitioner_Organization', models.ManyToManyField(blank=True, related_name='Patient_generalPractitioner', to='potato.fhir_organization')),
                ('managingOrganization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Patient_managingOrganization', to='potato.fhir_organization')),
                ('maritalStatus_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Patient_maritalStatus', to='potato.fhir_gp_coding')),
                ('generalPractitioner_Practitioner', models.ManyToManyField(blank=True, related_name='Patient_generalPractitioner', to='potato.fhir_practitioner')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_observation',
            name='performer_Patient',
            field=models.ManyToManyField(blank=True, related_name='Observation_performer', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_observation',
            name='subject_Patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_subject', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_immunization',
            name='informationSource_Patient_ref',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_informationSource_Patient', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_immunization',
            name='patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_patient', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_encounter_participant',
            name='actor_Patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_participant_actor', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_encounter',
            name='subject_Patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_subject', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_condition',
            name='asserter_Patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_asserter', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_condition',
            name='recorder_Patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_recorder', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_condition',
            name='subject_Patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_subject', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_appointment_participant',
            name='actor_Patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_participant_actor', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_appointment',
            name='subject_Patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_subject', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='asserter_Patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='AllergyIntolerance_asserter', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='AllergyIntolerance_patient', to='potato.fhir_patient'),
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='recorder_Patient',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='AllergyIntolerance_recorder', to='potato.fhir_patient'),
        ),
        migrations.CreateModel(
            name='FHIR_Patient_communication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('preferred', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('Patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Patient_communication', to='potato.fhir_patient')),
                ('language_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Patient_communication_language', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Patient_contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('unknown', 'Unknown')], null=True)),
                ('Patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Patient_contact', to='potato.fhir_patient')),
                ('address', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Patient_contact_address', to='potato.fhir_gp_address')),
                ('name', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Patient_contact_name', to='potato.fhir_gp_humanname')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Patient_contact_organization', to='potato.fhir_organization')),
                ('period', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Patient_contact_period', to='potato.fhir_gp_period')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Patient_contact_relationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Patient_contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Patient_contact_relationship', to='potato.fhir_patient_contact')),
                ('relationship_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Patient_contact_relationship', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Patient_contact_role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Patient_contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Patient_contact_role', to='potato.fhir_patient_contact')),
                ('role_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Patient_contact_role', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_observation',
            name='performer_Practitioner',
            field=models.ManyToManyField(blank=True, related_name='Observation_performer', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_observation',
            name='subject_Practitioner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_subject', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_immunization',
            name='informationSource_Practitioner_ref',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_informationSource_Practitioner', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_encounter_participant',
            name='actor_Practitioner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_participant_actor', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_condition',
            name='asserter_Practitioner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_asserter', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_condition',
            name='recorder_Practitioner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_recorder', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_appointment_participant',
            name='actor_Practitioner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_participant_actor', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='asserter_Practitioner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='AllergyIntolerance_asserter', to='potato.fhir_practitioner'),
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='recorder_Practitioner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='AllergyIntolerance_recorder', to='potato.fhir_practitioner'),
        ),
        migrations.CreateModel(
            name='FHIR_Practitioner_communication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('preferred', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('Practitioner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Practitioner_communication', to='potato.fhir_practitioner')),
                ('language_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Practitioner_communication_language', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Practitioner_qualification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('status_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Practitioner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Practitioner_qualification', to='potato.fhir_practitioner')),
                ('code_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Practitioner_qualification_code', to='potato.fhir_gp_coding')),
                ('issuer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Practitioner_qualification_issuer', to='potato.fhir_organization')),
                ('period', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Practitioner_qualification_period', to='potato.fhir_gp_period')),
                ('status_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Practitioner_qualification_status', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_PractitionerRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('display', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True)),
                ('endpoint', models.ManyToManyField(blank=True, related_name='PractitionerRole_endpoint', to='potato.fhir_endpoint')),
                ('healthcareService', models.ManyToManyField(blank=True, related_name='PractitionerRole_healthcareService', to='potato.fhir_healthcareservice')),
                ('location', models.ManyToManyField(blank=True, related_name='PractitionerRole_location', to='potato.fhir_location')),
                ('network', models.ManyToManyField(blank=True, related_name='PractitionerRole_network', to='potato.fhir_organization')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='PractitionerRole_organization', to='potato.fhir_organization')),
                ('period', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='PractitionerRole_period', to='potato.fhir_gp_period')),
                ('practitioner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='PractitionerRole_practitioner', to='potato.fhir_practitioner')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_patient',
            name='generalPractitioner_PractitionerRole',
            field=models.ManyToManyField(blank=True, related_name='Patient_generalPractitioner', to='potato.fhir_practitionerrole'),
        ),
        migrations.AddField(
            model_name='fhir_observation',
            name='performer_PractitionerRole',
            field=models.ManyToManyField(blank=True, related_name='Observation_performer', to='potato.fhir_practitionerrole'),
        ),
        migrations.AddField(
            model_name='fhir_immunization',
            name='informationSource_PractitionerRole_ref',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_informationSource_PractitionerRole', to='potato.fhir_practitionerrole'),
        ),
        migrations.AddField(
            model_name='fhir_encounter_participant',
            name='actor_PractitionerRole',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_participant_actor', to='potato.fhir_practitionerrole'),
        ),
        migrations.AddField(
            model_name='fhir_condition',
            name='asserter_PractitionerRole',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_asserter', to='potato.fhir_practitionerrole'),
        ),
        migrations.AddField(
            model_name='fhir_condition',
            name='recorder_PractitionerRole',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_recorder', to='potato.fhir_practitionerrole'),
        ),
        migrations.AddField(
            model_name='fhir_appointment_participant',
            name='actor_PractitionerRole',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_participant_actor', to='potato.fhir_practitionerrole'),
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='asserter_PractitionerRole',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='AllergyIntolerance_asserter', to='potato.fhir_practitionerrole'),
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='recorder_PractitionerRole',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='AllergyIntolerance_recorder', to='potato.fhir_practitionerrole'),
        ),
        migrations.CreateModel(
            name='FHIR_PractitionerRole_characteristic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('characteristic_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('PractitionerRole', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='PractitionerRole_characteristic', to='potato.fhir_practitionerrole')),
                ('characteristic_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='PractitionerRole_characteristic', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_PractitionerRole_code',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('PractitionerRole', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='PractitionerRole_code', to='potato.fhir_practitionerrole')),
                ('code_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='PractitionerRole_code', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_PractitionerRole_communication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('communication_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('PractitionerRole', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='PractitionerRole_communication', to='potato.fhir_practitionerrole')),
                ('communication_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='PractitionerRole_communication', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_PractitionerRole_specialty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specialty_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('PractitionerRole', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='PractitionerRole_specialty', to='potato.fhir_practitionerrole')),
                ('specialty_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='PractitionerRole_specialty', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_observation',
            name='partOf_Procedure',
            field=models.ManyToManyField(blank=True, related_name='Observation_partOf', to='potato.fhir_procedure'),
        ),
        migrations.AddField(
            model_name='fhir_observation',
            name='subject_Procedure',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_subject', to='potato.fhir_procedure'),
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_reason_value',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Encounter_reason', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_reason_value', to='potato.fhir_encounter_reason')),
                ('value_Condition_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_reason_value_Condition', to='potato.fhir_condition')),
                ('value_DiagnosticReport_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_reason_value_DiagnosticReport', to='potato.fhir_diagnosticreport')),
                ('value_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Encounter_reason_value', to='potato.fhir_gp_coding')),
                ('value_ImmunizationRecommendation_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_reason_value_ImmunizationRecommendation', to='potato.fhir_immunizationrecommendation')),
                ('value_Observation_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_reason_value_Observation', to='potato.fhir_observation')),
                ('value_Procedure_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_reason_value_Procedure', to='potato.fhir_procedure')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_reason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_reason', to='potato.fhir_appointment')),
                ('reason_Condition_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_reason_Condition', to='potato.fhir_condition')),
                ('reason_DiagnosticReport_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_reason_DiagnosticReport', to='potato.fhir_diagnosticreport')),
                ('reason_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Appointment_reason', to='potato.fhir_gp_coding')),
                ('reason_ImmunizationRecommendation_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_reason_ImmunizationRecommendation', to='potato.fhir_immunizationrecommendation')),
                ('reason_Observation_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_reason_Observation', to='potato.fhir_observation')),
                ('reason_Procedure_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_reason_Procedure', to='potato.fhir_procedure')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_observation',
            name='derivedFrom_QuestionnaireResponse',
            field=models.ManyToManyField(blank=True, related_name='Observation_derivedFrom', to='potato.fhir_questionnaireresponse'),
        ),
        migrations.AddField(
            model_name='fhir_observation',
            name='hasMember_QuestionnaireResponse',
            field=models.ManyToManyField(blank=True, related_name='Observation_hasMember', to='potato.fhir_questionnaireresponse'),
        ),
        migrations.CreateModel(
            name='FHIR_Patient_link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('replaced-by', 'Replaced-by'), ('replaces', 'Replaces'), ('refer', 'Refer'), ('seealso', 'Seealso')], null=True)),
                ('Patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Patient_link', to='potato.fhir_patient')),
                ('other_Patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Patient_link_other', to='potato.fhir_patient')),
                ('other_RelatedPerson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Patient_link_other', to='potato.fhir_relatedperson')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_observation',
            name='performer_RelatedPerson',
            field=models.ManyToManyField(blank=True, related_name='Observation_performer', to='potato.fhir_relatedperson'),
        ),
        migrations.CreateModel(
            name='FHIR_Immunization_performer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('function_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Immunization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Immunization_performer', to='potato.fhir_immunization')),
                ('function_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Immunization_performer_function', to='potato.fhir_gp_coding')),
                ('actor_Organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_performer_actor', to='potato.fhir_organization')),
                ('actor_Patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_performer_actor', to='potato.fhir_patient')),
                ('actor_Practitioner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_performer_actor', to='potato.fhir_practitioner')),
                ('actor_PractitionerRole', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_performer_actor', to='potato.fhir_practitionerrole')),
                ('actor_RelatedPerson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_performer_actor', to='potato.fhir_relatedperson')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_immunization',
            name='informationSource_RelatedPerson_ref',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Immunization_informationSource_RelatedPerson', to='potato.fhir_relatedperson'),
        ),
        migrations.CreateModel(
            name='FHIR_GP_Signature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_InstantField(blank=True, max_length=99999, null=True)),
                ('targetFormat', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, max_length=255, null=True)),
                ('sigFormat', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, max_length=255, null=True)),
                ('data', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_Base64BinaryField(blank=True, null=True)),
                ('onBehalfOf_device_foreignKey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='onBehalfOf_device', to='potato.fhir_device')),
                ('type', models.ManyToManyField(blank=True, related_name='types', to='potato.fhir_gp_coding')),
                ('who_device_foreignKey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='who_device', to='potato.fhir_device')),
                ('onBehalfOf_organization_foreignKey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='onBehalfOf_organization', to='potato.fhir_organization')),
                ('who_organization_foreignKey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='who_organization', to='potato.fhir_organization')),
                ('onBehalfOf_patient_foreignKey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='onBehalfOf_patient', to='potato.fhir_patient')),
                ('who_patient_foreignKey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='who_patient', to='potato.fhir_patient')),
                ('onBehalfOf_practitioner_foreignKey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='onBehalfOf_practitioner', to='potato.fhir_practitioner')),
                ('who_practitioner_foreignKey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='who_practitioner', to='potato.fhir_practitioner')),
                ('onBehalfOf_relatedPerson_foreignKey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='onBehalfOf_relatedPerson', to='potato.fhir_relatedperson')),
                ('who_relatedPerson_foreignKey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='who_relatedPerson', to='potato.fhir_relatedperson')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_GP_Annotation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_string', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=255, null=True)),
                ('time_datetime', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField(blank=True, null=True)),
                ('time_datetime_precision', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_DateTimeField_Precision(blank=True, choices=[('year', 'Year'), ('month', 'Month'), ('day', 'Day'), ('seconds', 'Seconds')], default='day', max_length=7, null=True)),
                ('text', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_MarkdownField(max_length=99999)),
                ('author_organization_foreignKey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='author_organization', to='potato.fhir_organization')),
                ('author_patient_foreignKey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='author_patient', to='potato.fhir_patient')),
                ('author_practitioner_foreignKey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='author_practitioner', to='potato.fhir_practitioner')),
                ('author_practitionerRole_foreignKey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='author_practitionerRole', to='potato.fhir_practitionerrole')),
                ('author_relatedPerson_foreignKey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='author_relatedPerson', to='potato.fhir_relatedperson')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_encounter_participant',
            name='actor_RelatedPerson',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_participant_actor', to='potato.fhir_relatedperson'),
        ),
        migrations.AddField(
            model_name='fhir_condition',
            name='asserter_RelatedPerson',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_asserter', to='potato.fhir_relatedperson'),
        ),
        migrations.AddField(
            model_name='fhir_condition',
            name='recorder_RelatedPerson',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_recorder', to='potato.fhir_relatedperson'),
        ),
        migrations.AddField(
            model_name='fhir_appointment_participant',
            name='actor_RelatedPerson',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Appointment_participant_actor', to='potato.fhir_relatedperson'),
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='asserter_RelatedPerson',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='AllergyIntolerance_asserter', to='potato.fhir_relatedperson'),
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='recorder_RelatedPerson',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='AllergyIntolerance_recorder', to='potato.fhir_relatedperson'),
        ),
        migrations.AddField(
            model_name='fhir_encounter',
            name='basedOn_RequestOrchestration',
            field=models.ManyToManyField(blank=True, related_name='Encounter_basedOn', to='potato.fhir_requestorchestration'),
        ),
        migrations.AddField(
            model_name='fhir_appointment',
            name='basedOn_RequestOrchestration',
            field=models.ManyToManyField(blank=True, related_name='Appointment_basedOn', to='potato.fhir_requestorchestration'),
        ),
        migrations.AddField(
            model_name='fhir_observation',
            name='basedOn_ServiceRequest',
            field=models.ManyToManyField(blank=True, related_name='Observation_basedOn', to='potato.fhir_servicerequest'),
        ),
        migrations.AddField(
            model_name='fhir_immunization',
            name='basedOn_ServiceRequest',
            field=models.ManyToManyField(blank=True, related_name='Immunization_basedOn', to='potato.fhir_servicerequest'),
        ),
        migrations.AddField(
            model_name='fhir_encounter',
            name='basedOn_ServiceRequest',
            field=models.ManyToManyField(blank=True, related_name='Encounter_basedOn', to='potato.fhir_servicerequest'),
        ),
        migrations.AddField(
            model_name='fhir_appointment',
            name='basedOn_ServiceRequest',
            field=models.ManyToManyField(blank=True, related_name='Appointment_basedOn', to='potato.fhir_servicerequest'),
        ),
        migrations.CreateModel(
            name='FHIR_Slot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CodeField(blank=True, choices=[('busy', 'Busy'), ('free', 'Free'), ('busy-unavailable', 'Busy-unavailable'), ('busy-tentative', 'Busy-tentative'), ('entered-in-error', 'Entered-in-error')], null=True)),
                ('start', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_InstantField(blank=True, null=True)),
                ('end', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_InstantField(blank=True, null=True)),
                ('overbooked', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_BooleanField(blank=True, null=True)),
                ('comment', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, null=True)),
                ('schedule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Slot_schedule', to='potato.fhir_schedule')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_appointment',
            name='slot',
            field=models.ManyToManyField(blank=True, related_name='Appointment_slot', to='potato.fhir_slot'),
        ),
        migrations.CreateModel(
            name='FHIR_Slot_appointmentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointmentType_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Slot_appointmentType', to='potato.fhir_slot')),
                ('appointmentType_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Slot_appointmentType', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Slot_serviceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serviceCategory_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Slot_serviceCategory', to='potato.fhir_slot')),
                ('serviceCategory_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Slot_serviceCategory', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Slot_serviceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serviceType_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Slot_serviceType', to='potato.fhir_slot')),
                ('serviceType_HealthcareService_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Slot_serviceType_HealthcareService', to='potato.fhir_healthcareservice')),
                ('serviceType_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Slot_serviceType', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_Slot_specialty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specialty_cctext', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(blank=True, max_length=5000, null=True)),
                ('Slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Slot_specialty', to='potato.fhir_slot')),
                ('specialty_cc', models.ManyToManyField(blank=True, limit_choices_to={'codings__binding_rule': 'TODO'}, related_name='Slot_specialty', to='potato.fhir_gp_coding')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_SP_Meta_Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_CanonicalField(max_length=255)),
                ('meta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profiles', to='potato.fhir_sp_meta')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_SP_Meta_Security',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(max_length=99999)),
                ('meta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='securitys', to='potato.fhir_sp_meta')),
            ],
        ),
        migrations.CreateModel(
            name='FHIR_SP_Meta_Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', potato.models_dir.FHIR_DataTypes.FHIR_primitive.FHIR_primitive_StringField(max_length=255)),
                ('meta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='potato.fhir_sp_meta')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_observation',
            name='specimen_Specimen',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_specimen', to='potato.fhir_specimen'),
        ),
        migrations.AddField(
            model_name='fhir_observation',
            name='subject_Substance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Observation_subject', to='potato.fhir_substance'),
        ),
        migrations.AddField(
            model_name='fhir_encounter',
            name='basedOn_VisionPrescription',
            field=models.ManyToManyField(blank=True, related_name='Encounter_basedOn', to='potato.fhir_visionprescription'),
        ),
        migrations.AddField(
            model_name='fhir_appointment',
            name='basedOn_VisionPrescription',
            field=models.ManyToManyField(blank=True, related_name='Appointment_basedOn', to='potato.fhir_visionprescription'),
        ),
        migrations.CreateModel(
            name='FHIR_AllergyIntolerance_identifier',
            fields=[
                ('fhir_gp_identifier_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_identifier')),
                ('AllergyIntolerance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='AllergyIntolerance_identifier', to='potato.fhir_allergyintolerance')),
            ],
            bases=('potato.fhir_gp_identifier',),
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_identifier',
            fields=[
                ('fhir_gp_identifier_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_identifier')),
                ('Appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_identifier', to='potato.fhir_appointment')),
            ],
            bases=('potato.fhir_gp_identifier',),
        ),
        migrations.CreateModel(
            name='FHIR_Condition_identifier',
            fields=[
                ('fhir_gp_identifier_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_identifier')),
                ('Condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Condition_identifier', to='potato.fhir_condition')),
            ],
            bases=('potato.fhir_gp_identifier',),
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_identifier',
            fields=[
                ('fhir_gp_identifier_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_identifier')),
                ('Encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_identifier', to='potato.fhir_encounter')),
            ],
            bases=('potato.fhir_gp_identifier',),
        ),
        migrations.CreateModel(
            name='FHIR_Immunization_identifier',
            fields=[
                ('fhir_gp_identifier_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_identifier')),
                ('Immunization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Immunization_identifier', to='potato.fhir_immunization')),
            ],
            bases=('potato.fhir_gp_identifier',),
        ),
        migrations.CreateModel(
            name='FHIR_Location_identifier',
            fields=[
                ('fhir_gp_identifier_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_identifier')),
                ('Location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Location_identifier', to='potato.fhir_location')),
            ],
            bases=('potato.fhir_gp_identifier',),
        ),
        migrations.CreateModel(
            name='FHIR_Observation_identifier',
            fields=[
                ('fhir_gp_identifier_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_identifier')),
                ('Observation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Observation_identifier', to='potato.fhir_observation')),
            ],
            bases=('potato.fhir_gp_identifier',),
        ),
        migrations.CreateModel(
            name='FHIR_Patient_identifier',
            fields=[
                ('fhir_gp_identifier_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_identifier')),
                ('Patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Patient_identifier', to='potato.fhir_patient')),
            ],
            bases=('potato.fhir_gp_identifier',),
        ),
        migrations.CreateModel(
            name='FHIR_Practitioner_identifier',
            fields=[
                ('fhir_gp_identifier_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_identifier')),
                ('Practitioner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Practitioner_identifier', to='potato.fhir_practitioner')),
            ],
            bases=('potato.fhir_gp_identifier',),
        ),
        migrations.CreateModel(
            name='FHIR_Practitioner_qualification_identifier',
            fields=[
                ('fhir_gp_identifier_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_identifier')),
                ('Practitioner_qualification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Practitioner_qualification_identifier', to='potato.fhir_practitioner_qualification')),
            ],
            bases=('potato.fhir_gp_identifier',),
        ),
        migrations.CreateModel(
            name='FHIR_PractitionerRole_identifier',
            fields=[
                ('fhir_gp_identifier_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_identifier')),
                ('PractitionerRole', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='PractitionerRole_identifier', to='potato.fhir_practitionerrole')),
            ],
            bases=('potato.fhir_gp_identifier',),
        ),
        migrations.CreateModel(
            name='FHIR_Slot_identifier',
            fields=[
                ('fhir_gp_identifier_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_identifier')),
                ('Slot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Slot_identifier', to='potato.fhir_slot')),
            ],
            bases=('potato.fhir_gp_identifier',),
        ),
        migrations.CreateModel(
            name='FHIR_AllergyIntolerance_note',
            fields=[
                ('fhir_gp_annotation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_annotation')),
                ('AllergyIntolerance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='AllergyIntolerance_note', to='potato.fhir_allergyintolerance')),
            ],
            bases=('potato.fhir_gp_annotation',),
        ),
        migrations.CreateModel(
            name='FHIR_AllergyIntolerance_reaction_note',
            fields=[
                ('fhir_gp_annotation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_annotation')),
                ('AllergyIntolerance_reaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='AllergyIntolerance_reaction_note', to='potato.fhir_allergyintolerance_reaction')),
            ],
            bases=('potato.fhir_gp_annotation',),
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_note',
            fields=[
                ('fhir_gp_annotation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_annotation')),
                ('Appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_note', to='potato.fhir_appointment')),
            ],
            bases=('potato.fhir_gp_annotation',),
        ),
        migrations.CreateModel(
            name='FHIR_Condition_note',
            fields=[
                ('fhir_gp_annotation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_annotation')),
                ('Condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Condition_note', to='potato.fhir_condition')),
            ],
            bases=('potato.fhir_gp_annotation',),
        ),
        migrations.CreateModel(
            name='FHIR_Immunization_note',
            fields=[
                ('fhir_gp_annotation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_annotation')),
                ('Immunization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Immunization_note', to='potato.fhir_immunization')),
            ],
            bases=('potato.fhir_gp_annotation',),
        ),
        migrations.CreateModel(
            name='FHIR_Observation_note',
            fields=[
                ('fhir_gp_annotation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_annotation')),
                ('Observation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Observation_note', to='potato.fhir_observation')),
            ],
            bases=('potato.fhir_gp_annotation',),
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_requestedPeriod',
            fields=[
                ('fhir_gp_period_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_period')),
                ('Appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_requestedPeriod', to='potato.fhir_appointment')),
            ],
            bases=('potato.fhir_gp_period',),
        ),
        migrations.CreateModel(
            name='FHIR_Appointment_virtualService',
            fields=[
                ('fhir_meta_virtualservicedetail_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_meta_virtualservicedetail')),
                ('Appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Appointment_virtualService', to='potato.fhir_appointment')),
            ],
            bases=('potato.fhir_meta_virtualservicedetail',),
        ),
        migrations.CreateModel(
            name='FHIR_Encounter_virtualService',
            fields=[
                ('fhir_meta_virtualservicedetail_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_meta_virtualservicedetail')),
                ('Encounter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Encounter_virtualService', to='potato.fhir_encounter')),
            ],
            bases=('potato.fhir_meta_virtualservicedetail',),
        ),
        migrations.CreateModel(
            name='FHIR_Location_virtualService',
            fields=[
                ('fhir_meta_virtualservicedetail_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_meta_virtualservicedetail')),
                ('Location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Location_virtualService', to='potato.fhir_location')),
            ],
            bases=('potato.fhir_meta_virtualservicedetail',),
        ),
        migrations.CreateModel(
            name='FHIR_Patient_address',
            fields=[
                ('fhir_gp_address_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_address')),
                ('Patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Patient_address', to='potato.fhir_patient')),
            ],
            bases=('potato.fhir_gp_address',),
        ),
        migrations.CreateModel(
            name='FHIR_Patient_contact_additionalAddress',
            fields=[
                ('fhir_gp_address_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_address')),
                ('Patient_contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Patient_contact_additionalAddress', to='potato.fhir_patient_contact')),
            ],
            bases=('potato.fhir_gp_address',),
        ),
        migrations.CreateModel(
            name='FHIR_Practitioner_address',
            fields=[
                ('fhir_gp_address_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_address')),
                ('Practitioner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Practitioner_address', to='potato.fhir_practitioner')),
            ],
            bases=('potato.fhir_gp_address',),
        ),
        migrations.CreateModel(
            name='FHIR_Patient_photo',
            fields=[
                ('fhir_gp_attachment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_attachment')),
                ('Patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Patient_photo', to='potato.fhir_patient')),
            ],
            bases=('potato.fhir_gp_attachment',),
        ),
        migrations.CreateModel(
            name='FHIR_Practitioner_photo',
            fields=[
                ('fhir_gp_attachment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_attachment')),
                ('Practitioner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Practitioner_photo', to='potato.fhir_practitioner')),
            ],
            bases=('potato.fhir_gp_attachment',),
        ),
        migrations.CreateModel(
            name='FHIR_Patient_contact_telecom',
            fields=[
                ('fhir_gp_contactpoint_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_contactpoint')),
                ('Patient_contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Patient_contact_telecom', to='potato.fhir_patient_contact')),
            ],
            bases=('potato.fhir_gp_contactpoint',),
        ),
        migrations.CreateModel(
            name='FHIR_Patient_telecom',
            fields=[
                ('fhir_gp_contactpoint_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_contactpoint')),
                ('Patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Patient_telecom', to='potato.fhir_patient')),
            ],
            bases=('potato.fhir_gp_contactpoint',),
        ),
        migrations.CreateModel(
            name='FHIR_Practitioner_telecom',
            fields=[
                ('fhir_gp_contactpoint_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_contactpoint')),
                ('Practitioner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Practitioner_telecom', to='potato.fhir_practitioner')),
            ],
            bases=('potato.fhir_gp_contactpoint',),
        ),
        migrations.CreateModel(
            name='FHIR_Patient_contact_additionalName',
            fields=[
                ('fhir_gp_humanname_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_humanname')),
                ('Patient_contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Patient_contact_additionalName', to='potato.fhir_patient_contact')),
            ],
            bases=('potato.fhir_gp_humanname',),
        ),
        migrations.CreateModel(
            name='FHIR_Patient_name',
            fields=[
                ('fhir_gp_humanname_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_humanname')),
                ('Patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Patient_name', to='potato.fhir_patient')),
            ],
            bases=('potato.fhir_gp_humanname',),
        ),
        migrations.CreateModel(
            name='FHIR_Practitioner_name',
            fields=[
                ('fhir_gp_humanname_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_gp_humanname')),
                ('Practitioner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Practitioner_name', to='potato.fhir_practitioner')),
            ],
            bases=('potato.fhir_gp_humanname',),
        ),
        migrations.AddField(
            model_name='fhir_condition',
            name='abatement_Age',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_abatement_Age', to='potato.fhir_gp_quantity_age'),
        ),
        migrations.AddField(
            model_name='fhir_condition',
            name='onset_Age',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Condition_onset_Age', to='potato.fhir_gp_quantity_age'),
        ),
        migrations.AddField(
            model_name='fhir_allergyintolerance',
            name='onset_Age',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='AllergyIntolerance_onset_Age', to='potato.fhir_gp_quantity_age'),
        ),
        migrations.AddField(
            model_name='fhir_encounter',
            name='length',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Encounter_length', to='potato.fhir_gp_quantity_duration'),
        ),
        migrations.AddField(
            model_name='fhir_gp_sampleddata',
            name='origin',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='sampleddata_origin', to='potato.fhir_gp_quantity_simple'),
        ),
        migrations.CreateModel(
            name='FHIR_GP_RatioRange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('denominator', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ratio_range_denominator', to='potato.fhir_gp_quantity_simple')),
                ('numerator_high', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ratio_range_numerator_high', to='potato.fhir_gp_quantity_simple')),
                ('numerator_low', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ratio_range_numerator_low', to='potato.fhir_gp_quantity_simple')),
            ],
        ),
        migrations.AddField(
            model_name='fhir_gp_range',
            name='high',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='range_high', to='potato.fhir_gp_quantity_simple'),
        ),
        migrations.AddField(
            model_name='fhir_gp_range',
            name='low',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='range_low', to='potato.fhir_gp_quantity_simple'),
        ),
        migrations.CreateModel(
            name='FHIR_Location_contact',
            fields=[
                ('fhir_meta_extendedcontactdetail_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_meta_extendedcontactdetail')),
                ('Location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Location_contact', to='potato.fhir_location')),
            ],
            bases=('potato.fhir_meta_extendedcontactdetail',),
        ),
        migrations.CreateModel(
            name='FHIR_PractitionerRole_contact',
            fields=[
                ('fhir_meta_extendedcontactdetail_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='potato.fhir_meta_extendedcontactdetail')),
                ('PractitionerRole', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='PractitionerRole_contact', to='potato.fhir_practitionerrole')),
            ],
            bases=('potato.fhir_meta_extendedcontactdetail',),
        ),
    ]
